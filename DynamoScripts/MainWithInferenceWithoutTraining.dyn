{
  "Uuid": "fbc6d016-0cd7-4b3c-8fff-4142e5e2550b",
  "IsCustomNode": false,
  "Description": null,
  "Name": "MainWithInferenceWithoutTraining",
  "ElementResolver": {
    "ResolutionMap": {
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      }
    }
  },
  "Inputs": [
    {
      "Id": "ac1bad5b4a9e4b1cabcdfd715b9e5da5",
      "Name": "CORRIDOR WIDTH",
      "Type": "number",
      "Value": "2",
      "MaximumValue": 4.0,
      "MinimumValue": 2.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "6eda79a2c2e040078d1fd66754c14bd9",
      "Name": "NUM_ROOMS_SHORT_SIDE",
      "Type": "number",
      "Value": "3",
      "MaximumValue": 15.0,
      "MinimumValue": 2.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "d441a2d6f0c14ff48dd4597348011063",
      "Name": "NUM_ROOMS_LONG_SIDE",
      "Type": "number",
      "Value": "3",
      "MaximumValue": 15.0,
      "MinimumValue": 2.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "7e346971f5c24f37a17e4b6625f1dfd8",
      "Name": "SITE_X",
      "Type": "number",
      "Value": "25",
      "MaximumValue": 60.0,
      "MinimumValue": 20.0,
      "StepValue": 5.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "584bef6044484045b318ed18b4ef189a",
      "Name": "SITE_Y",
      "Type": "number",
      "Value": "20",
      "MaximumValue": 40.0,
      "MinimumValue": 10.0,
      "StepValue": 5.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    },
    {
      "Id": "a4e31f61d6e142a69577153b5065a6bf",
      "Name": "INCLUDE_BOTTLENECK",
      "Type": "boolean",
      "Value": "false",
      "Description": "Selection between a true and false."
    },
    {
      "Id": "5b350cebac314cb9a325306ec845d417",
      "Name": "Geometry Shape: 1 = MultiLevel; 2 = Cross; 3 = E2E; 4 = Edge",
      "Type": "number",
      "Value": "1",
      "MaximumValue": 4.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "A slider that produces numeric values."
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\nimport os\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\n\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.Revit.DB import *\r\n#from Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.DB import StairsEditScope\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import StairsRun\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n###############################################################\r\n# Customize functions \r\n###############################################################\r\n\"\"\"\r\nConverts default unit in Dynamo into meter...\r\n\"\"\"\r\ndef convert_meter_to_unit(pre_value):\r\n    tempo_list = []\r\n    tempo_value = 0\r\n    if isinstance(pre_value, list):\r\n        len_list = len(pre_value)\r\n        for ii in range(len_list):\r\n            tempo_list.append (float(UnitUtils.ConvertToInternalUnits(pre_value[ii], UnitTypeId.Meters)))\r\n        pre_value = tempo_list\r\n    else:\r\n        tempo_value = float(UnitUtils.ConvertToInternalUnits(pre_value, UnitTypeId.Meters))\r\n        pre_value = tempo_value\r\n    return pre_value\r\n\r\n\r\ndef convert_to_meter(internal_value):\r\n\tif isinstance(internal_value, list):\r\n\t\treturn [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in internal_value]\r\n\treturn float(UnitUtils.ConvertFromInternalUnits(internal_value, UnitTypeId.Meters))\r\n\r\n\"\"\"\r\nProvide perimeter lines from three dimensions...\r\n\"\"\"\r\ndef find_perimeter_lines(x,y,z):\r\n    line_list = []\r\n    xx = x\r\n    yy = y\r\n    zz = z \r\n    # print \"find_perimeter_lines x: \" + str(x)\r\n    # print \"find_perimeter_lines y: \" + str(y)\r\n    # print \"find_perimeter_lines z: \" + str(z)\r\n\t\r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n\r\n    line_list.append(line_1)\r\n    line_list.append(line_2)\r\n    line_list.append(line_3)\r\n    line_list.append(line_4)\r\n    \r\n    return line_list\r\n\r\n\"\"\"\r\nProvide the geometry of slab by level...\r\n\"\"\"\r\ndef slab_geometry_by_level(x,y,level,delta_z):\r\n    zz = level.Elevation + delta_z\r\n    xx = x\r\n    yy = y \r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n    \r\n    slab_geometry = CurveArray()\r\n    slab_geometry.Append(line_1)\r\n    slab_geometry.Append(line_2)\r\n    slab_geometry.Append(line_3)\r\n    slab_geometry.Append(line_4)\r\n    return slab_geometry\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# uiapp = DocumentManager.Instance.CurrentUIApplication \r\n# app = uiapp.Application\r\n# uidoc = uiapp.ActiveUIDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ndefault_exterior_wall_type = UnwrapElement(IN[0])                   # Default exterior wall type\r\ndefault_floor_type = UnwrapElement(IN[1])                           # Default Floor type\r\ndefault_interior_wall_type = UnwrapElement(IN[2])\t\t\t\t# Default interior wall type\r\n### INPUT PARAMETERS ###\r\nparameter_list = IN[3][1]\r\nsite_x = parameter_list[0]                                # the overall length of the site\r\nsite_y = parameter_list[1]                                # the overall widthness of the site\r\nCORR_WIDTH = parameter_list[2] # convert_meter_to_unit(3)\r\nNUM_ROOMS_SHORT_SIDE = parameter_list[3]\r\nNUM_ROOMS_LONG_SIDE = parameter_list[4]\r\nUSE_BOTTLENECKS = parameter_list[5]\r\n\r\ncreate_mode = IN[7][2]\r\nDOOR_WIDTH_H = convert_meter_to_unit(float(IN[4])/2.)\r\nOBSTACLE_WIDTH = float(IN[5])\r\n\r\nnumber_story = 1                                          # the total amount of the stories;\r\nstory_z = [0]\r\nsite_z = 4                                              # the overall height of the site\r\nref_level_z = 0                                         # the z-position of the reference level (default level = level 0, created in the prepared .rvt)\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n###############################################################\r\n# Define the output\r\n###############################################################\r\n\r\n# Create room dict\r\nroom_dict = {}\r\n\r\nif create_mode:\r\n    geo_site = []                                                       # archive all the input data\r\n    ref_level = []                                                      # the reference level\r\n    bbox_site = []                                                      # bounding box of the site\r\n\r\n    # sys.path.append('C:\\Users\\ga78jem\\Miniconda3\\envs\\trajectron++\\Lib\\site-packages')\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n\r\n    # print \"site x before conversion:\" + str(site_x)\r\n    # adjust the sizes to account for wall thickness\r\n    site_x -= 0.3\r\n    site_y -= 0.3\r\n    site_x = convert_meter_to_unit(site_x)\r\n    site_y = convert_meter_to_unit(site_y)\r\n    site_z = convert_meter_to_unit(site_z)\r\n    ref_level_z = convert_meter_to_unit(ref_level_z)\r\n    CORR_WIDTH = convert_meter_to_unit(CORR_WIDTH)\r\n    # print \"site x after conversion:\" + str(site_x)\r\n\r\n    ###############################################################\r\n    # Delete all levels apart from the reference level (when there are multiple levels)\r\n    ###############################################################\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    def clear_model(bool_value):\r\n        if bool_value:\r\n            del_grid = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType().ToElements()\r\n            del_door = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n            del_floor = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n            del_wall = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n            del_roof = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n            del_all = [del_grid, del_door, del_floor, del_wall, del_roof]\r\n            for element_type in del_all:\r\n                for element in element_type:\r\n                    doc.Delete(element.Id)\r\n\r\n    clear_model(True)\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 01_Site\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level_z:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != ref_level_z:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, ref_level_z)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    #--------------------------------------------------------------\r\n    #------------------ OK NOW YOU CAN CODE -----------------------\r\n    #--------------------------------------------------------------\r\n\r\n    # Create Bounding Box\r\n    bb = BoundingBoxXYZ()\r\n    bb.Min = XYZ(0, 0, 0)\r\n    bb.Max = XYZ(0, 0, site_z)\r\n    bbox_site.append(bb.ToProtoType())                  # the bounding box of the entire site\r\n    # Close and save the recording file\r\n    # geo_site.append(site_x)\r\n    # geo_site.append(site_y)\r\n    # geo_site.append(site_z)\r\n\r\n    ###############################################################\r\n    # END OF SCRIPT 1\r\n    # START OF SCRIPT 2\r\n    ###############################################################\r\n\r\n    archive_data = []                                                   # archive all the input data\r\n    bbox_story = []\r\n    exterior_wall_list = []\r\n    floor_list = []\r\n    roof_list = []\r\n    entrance_door_list = []\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n    story_z = convert_meter_to_unit(story_z)\r\n\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 02_Story\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level.Elevation:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != 0:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, 0)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    ###############################################################\r\n    # Check the consistence with the bouning box of the side \r\n    ###############################################################\r\n    # Check the z-position of the highest story against the site box\r\n\r\n    check_site_story = True if max(story_z) < site_z else False\r\n    #print \"The stories are consistent with the overal site:\" + str(check_site_story)\r\n\r\n    # Create new story levels\r\n    for ii in range(number_story):\r\n        if ref_level.Elevation == story_z[ii]:\r\n            continue\r\n        new_level = Autodesk.Revit.DB.Level.Create(doc, story_z[ii])\r\n        new_level.Name = \"Story Level \" + str(ii)\r\n\r\n    # Create the roof level\r\n    roof_level = Autodesk.Revit.DB.Level.Create(doc, site_z)\r\n    roof_level.Name = \"Roof Level\"\r\n\r\n    # all levels\r\n    allLevels = FilteredElementCollector(doc).OfClass(Level).ToElements()\r\n\r\n    # Create Bounding Box for each story level\r\n    for ii in range(number_story):\r\n        level_bbox_end_z = story_z[ii+1] if ii < (number_story-1) else site_z\r\n        #print \"Story\"+str(ii)\r\n        #print str(level_bbox_end_z)\r\n        bb = BoundingBoxXYZ()\r\n        bb.Min = XYZ(0, 0, story_z[ii])\r\n        bb.Max = XYZ(site_x, site_y, level_bbox_end_z)\r\n        bbox_story.append(bb.ToProtoType())\r\n\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n    # Create floorplan complexity\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n\r\n    WIDTH = site_y\r\n    LENGTH = site_x\r\n    print('x_length: ' + str(convert_to_meter(LENGTH)))\r\n    print('y_width: ' + str(convert_to_meter(WIDTH)))\r\n    print(\"\")\r\n    z_level = ref_level.Elevation\r\n    ceiling = allLevels[0].Elevation\r\n\r\n    obstacle_counter = 0\r\n\r\n    # Create the exterior walls\r\n    perimeter_lines = find_perimeter_lines(LENGTH, WIDTH, z_level)\r\n    for ww in range(4):\r\n        wall = Wall.Create(doc, perimeter_lines[ww], default_exterior_wall_type.Id, ref_level.Id, site_z, 0, False, True)\r\n        exterior_wall_list.append(wall)\r\n\r\n    # Create floor for each story level\r\n    for ii in range(number_story):\r\n        ll = allLevels[ii]\r\n        floor_geometry = slab_geometry_by_level(LENGTH, WIDTH, ll, 0.0)\r\n        floor = doc.Create.NewFloor(floor_geometry, default_floor_type, ll, True)\r\n        floor_list.append(floor)\r\n\r\n    # Create corridor lines\r\n    y_main_corridor = 0.5*WIDTH\r\n    x_main_corridor_start = 1.5*CORR_WIDTH\r\n    x_main_corridor_end = LENGTH-1.5*CORR_WIDTH\r\n        \r\n    bottlneck_ys = [CORR_WIDTH, WIDTH-CORR_WIDTH]\r\n\r\n    P0_long = XYZ(x_main_corridor_start, 0, ceiling)\r\n    P1_long = XYZ(x_main_corridor_start, y_main_corridor - CORR_WIDTH/2., ceiling)\r\n    P2_long = XYZ(LENGTH, y_main_corridor - CORR_WIDTH/2., ceiling)\r\n\r\n    line_corr_0_long = Autodesk.Revit.DB.Line.CreateBound(P0_long, P1_long)\r\n    line_corr_1_long = Autodesk.Revit.DB.Line.CreateBound(P1_long, P2_long)\r\n\r\n    P1_short = XYZ(0, y_main_corridor + CORR_WIDTH/2., ceiling)\r\n    P2_short = XYZ(x_main_corridor_end, y_main_corridor + CORR_WIDTH/2., ceiling)\r\n    P3_short = XYZ(x_main_corridor_end, WIDTH, ceiling)\r\n    \r\n    line_corr_1_short = Autodesk.Revit.DB.Line.CreateBound(P1_short, P2_short)\r\n    line_corr_2_short = Autodesk.Revit.DB.Line.CreateBound(P2_short, P3_short)\r\n\r\n    corr_room_lines = [line_corr_1_short, line_corr_2_short, line_corr_0_long, line_corr_1_long] # , line_corr_2_long, line_corr_3_long]\r\n    # Create corridor-room walls\r\n    corr_walls = [Wall.Create(doc, wall_line, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \\\r\n        for wall_line in corr_room_lines]\r\n\r\n    # obstacles\r\n    obstacle_length = 1.\r\n\r\n    x_obst_min, x_obst_max = convert_to_meter(x_main_corridor_end)+0.1, convert_to_meter(x_main_corridor_end)+0.1+obstacle_length\r\n    y_obst_min, y_obst_max = convert_to_meter(y_main_corridor + CORR_WIDTH/2.)+0.5, convert_to_meter(y_main_corridor + CORR_WIDTH/2.)+0.5+OBSTACLE_WIDTH\r\n    room_dict.update({\r\n        'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_1_1_': [\r\n                (x_obst_min, y_obst_min),\r\n                (x_obst_max, y_obst_max)\r\n            ]\r\n        }\r\n    )\r\n    obstacle_counter += 1\r\n\r\n    x_obst_min, x_obst_max = convert_to_meter(x_main_corridor_start)-0.1-obstacle_length, convert_to_meter(x_main_corridor_start)-0.1\r\n    y_obst_min, y_obst_max = convert_to_meter(y_main_corridor - CORR_WIDTH/2.)-0.5-OBSTACLE_WIDTH, convert_to_meter(y_main_corridor - CORR_WIDTH/2.)-0.5\r\n    room_dict.update({\r\n        'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_1_1_': [\r\n                (x_obst_min, y_obst_min),\r\n                (x_obst_max, y_obst_max)\r\n            ]\r\n        }\r\n    )\r\n    obstacle_counter += 1\r\n    \r\n\r\n    # destination areas\r\n    bottlneck_ys_room_dict = [0, WIDTH]\r\n    origin_opening_list = []\r\n    \r\n    x_min_fixed_1, x_max_fixed_1 = min(0, x_main_corridor_start), max(0, x_main_corridor_start)\r\n    y_min_fixed_1, y_max_fixed_1 = min(bottlneck_ys[0], bottlneck_ys_room_dict[0]), max(bottlneck_ys[0], bottlneck_ys_room_dict[0])\r\n\r\n    room_dict.update({\r\n        'CROWDIT_DESTINATION_0': [\r\n                (convert_to_meter(x_min_fixed_1)+0.5, convert_to_meter(y_min_fixed_1)+0.5),\r\n                (convert_to_meter(x_max_fixed_1)-0.5, convert_to_meter(y_max_fixed_1)-0.5)\r\n            ]\r\n        }\r\n    )\r\n\r\n    x_min_fixed_2, x_max_fixed_2 = min(x_main_corridor_end, LENGTH), max(x_main_corridor_end, LENGTH)\r\n    y_min_fixed_2, y_max_fixed_2 = min(bottlneck_ys[1], bottlneck_ys_room_dict[1]), max(bottlneck_ys[1], bottlneck_ys_room_dict[1])\r\n\r\n    room_dict.update({\r\n        'CROWDIT_DESTINATION_1': [\r\n                (convert_to_meter(x_min_fixed_2)+0.5, convert_to_meter(y_min_fixed_2)+0.5),\r\n                (convert_to_meter(x_max_fixed_2)-0.5, convert_to_meter(y_max_fixed_2)-0.5)\r\n            ]\r\n        }\r\n    )\r\n\r\n    ###############\r\n    # Office rooms\r\n    ###############\r\n    # DOOR_WIDTH_H = convert_meter_to_unit(0.5)\r\n    DOOR_HEIGHT = convert_meter_to_unit(2.2)\r\n    DOOR_THICKNESS_H = convert_meter_to_unit(0.25)\r\n\r\n    # short side\r\n    fractions = [1./(NUM_ROOMS_SHORT_SIDE)*i for i in range(NUM_ROOMS_SHORT_SIDE+1)]\r\n    short_x_coord_list = [P1_short[0] + fr * (P2_short[0] - P1_short[0]) for fr in fractions]\r\n    \r\n    for x_coord in short_x_coord_list[1:-1]:\r\n        office_office_line = Autodesk.Revit.DB.Line.CreateBound(\r\n                XYZ(x_coord, P2_short[1], ceiling),\r\n                XYZ(x_coord, P3_short[1], ceiling))\r\n        Wall.Create(doc, office_office_line, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True)\r\n    \r\n    # create openings short offices\r\n    for id in range(len(short_x_coord_list)-1):\r\n        x_opening = (short_x_coord_list[id+1] + short_x_coord_list[id])/2.\r\n        y_opening = P1_short[1]\r\n        z_opening = z_level\r\n\r\n        start_point = XYZ(x_opening-DOOR_WIDTH_H, y_opening-DOOR_THICKNESS_H, z_opening)\r\n        end_point = XYZ(x_opening+DOOR_WIDTH_H, y_opening+DOOR_THICKNESS_H, z_opening+DOOR_HEIGHT)\r\n        origin_opening_list.append(doc.Create.NewOpening(corr_walls[0], start_point, end_point))\r\n\r\n        y_min_var_short, y_max_var_short = min(P1_short[1], P3_short[1]), max(P1_short[1], P3_short[1])\r\n\r\n        room_dict.update({\r\n            'CROWDIT_ORIGIN_'+str(id): [\r\n                    (convert_to_meter(short_x_coord_list[id])+0.5, convert_to_meter(y_min_var_short)+0.5),\r\n                    (convert_to_meter(short_x_coord_list[id+1])-0.5, convert_to_meter(y_max_var_short)-0.5)\r\n                ]\r\n            }\r\n        )\r\n\r\n        if id > 0:\r\n            # obstacle: rectangle (e.g. table: 2x1 m rectangle)\r\n            obstacle_length = 2.\r\n            if y_opening < y_main_corridor:\r\n                y_obst_min = convert_to_meter(y_opening)+0.1\r\n                y_obst_max = convert_to_meter(y_opening)+0.1+OBSTACLE_WIDTH\r\n            else:\r\n                y_obst_min = convert_to_meter(y_opening)-0.1-OBSTACLE_WIDTH\r\n                y_obst_max = convert_to_meter(y_opening)-0.1\r\n\r\n            room_dict.update({\r\n                'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_2_1_': [\r\n                        (convert_to_meter(short_x_coord_list[id])-obstacle_length/2., y_obst_min),\r\n                        (convert_to_meter(short_x_coord_list[id])+obstacle_length/2., y_obst_max)\r\n                    ]\r\n                }\r\n            )\r\n            obstacle_counter += 1\r\n\r\n\r\n    # long side\r\n    # create openings long offices\r\n    fractions = [1./(NUM_ROOMS_LONG_SIDE)*i for i in range(NUM_ROOMS_LONG_SIDE+1)]\r\n    long_x_coord_list = [P1_long[0] + fr * (P2_long[0] - P1_long[0]) for fr in fractions]\r\n\r\n    for x_coord in long_x_coord_list[1:-1]:\r\n        office_office_line = Autodesk.Revit.DB.Line.CreateBound(\r\n                XYZ(x_coord, P2_long[1], ceiling),\r\n                XYZ(x_coord, P0_long[1], ceiling))\r\n        Wall.Create(doc, office_office_line, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True)\r\n\r\n    \r\n    # create openings long offices\r\n    for id in range(len(long_x_coord_list[:-1])):\r\n        x_opening = (long_x_coord_list[id+1] + long_x_coord_list[id])/2.\r\n        y_opening = P1_long[1]\r\n        z_opening = z_level\r\n\r\n        start_point = XYZ(x_opening-DOOR_WIDTH_H, y_opening-DOOR_THICKNESS_H, z_opening)\r\n        end_point = XYZ(x_opening+DOOR_WIDTH_H, y_opening+DOOR_THICKNESS_H, z_opening+DOOR_HEIGHT)\r\n        origin_opening_list.append(doc.Create.NewOpening(corr_walls[3], start_point, end_point))\r\n\r\n        y_min_var_long, y_max_var_long = min(P0_long[1], P1_long[1]), max(P0_long[1], P1_long[1])\r\n        room_dict.update({\r\n            'CROWDIT_ORIGIN_'+str(id+len(short_x_coord_list)-1): [\r\n                    (convert_to_meter(long_x_coord_list[id])+0.5, convert_to_meter(y_min_var_long)+0.5),\r\n                    (convert_to_meter(long_x_coord_list[id+1])-0.5, convert_to_meter(y_max_var_long)-0.5)\r\n                ]\r\n            }\r\n        )\r\n\r\n        if id > 0:\r\n            # obstacle: rectangle (e.g. table: 2x1 m rectangle)\r\n            obstacle_length = 2.\r\n            if y_opening < y_main_corridor:\r\n                y_obst_min = convert_to_meter(y_opening)+0.1\r\n                y_obst_max = convert_to_meter(y_opening)+0.1+OBSTACLE_WIDTH\r\n            else:\r\n                y_obst_min = convert_to_meter(y_opening)-0.1-OBSTACLE_WIDTH\r\n                y_obst_max = convert_to_meter(y_opening)-0.1\r\n\r\n            room_dict.update({\r\n                'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_2_1_': [\r\n                        (convert_to_meter(long_x_coord_list[id])-obstacle_length/2., y_obst_min),\r\n                        (convert_to_meter(long_x_coord_list[id])+obstacle_length/2., y_obst_max)\r\n                    ]\r\n                }\r\n            )\r\n            obstacle_counter += 1\r\n\r\n\r\n    if USE_BOTTLENECKS:\r\n        bottleneck_lines = [\r\n            Autodesk.Revit.DB.Line.CreateBound(\r\n                XYZ(0, bottlneck_ys[0], ceiling),\r\n                XYZ(x_main_corridor_start, bottlneck_ys[0], ceiling)),\r\n            \r\n            Autodesk.Revit.DB.Line.CreateBound(\r\n                XYZ(x_main_corridor_end, bottlneck_ys[1], ceiling),\r\n                XYZ(LENGTH, bottlneck_ys[1], ceiling))\r\n        ]\r\n        \r\n        bottleneck_walls = [Wall.Create(doc, line, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True)\r\n            for line in bottleneck_lines]\r\n\r\n        # some doors\r\n        x_opening_1 = x_main_corridor_start/2.\r\n        y_opening_1 = bottlneck_ys[0]\r\n        z_opening_1 = z_level\r\n\r\n        start_point_1 = XYZ(x_opening_1-DOOR_WIDTH_H, y_opening_1-DOOR_THICKNESS_H, z_opening_1)\r\n        end_point_1 = XYZ(x_opening_1+DOOR_WIDTH_H, y_opening_1+DOOR_THICKNESS_H, z_opening+DOOR_HEIGHT)\r\n        opening_1 = doc.Create.NewOpening(bottleneck_walls[0], start_point_1, end_point_1)\r\n\r\n        x_opening_2 = x_main_corridor_end + (LENGTH-x_main_corridor_end)/2.\r\n        y_opening_2 = bottlneck_ys[1]\r\n        z_opening_2 = z_level\r\n\r\n        start_point_2 = XYZ(x_opening_2-DOOR_WIDTH_H, y_opening_2-DOOR_THICKNESS_H, z_opening_2)\r\n        end_point_2 = XYZ(x_opening_2+DOOR_WIDTH_H, y_opening_2+DOOR_THICKNESS_H, z_opening_2+DOOR_HEIGHT)\r\n        opening_2 = doc.Create.NewOpening(bottleneck_walls[1], start_point_2, end_point_2)\r\n\r\n    assert len(origin_opening_list) == len([key for key in room_dict if key.startswith('CROWDIT_ORIGIN_')])\r\n    \r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = room_dict # , len([key for key in room_dict if key.startswith('CROWDIT_OBSTACLE_')])",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "ec5e304ac4a245be9aa9421d0e99101c",
      "Inputs": [
        {
          "Id": "35c72e7a9b8e4c1c9896dbe0ea97a867",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df4e28a0157c4957be1d9f39b5f8c7a3",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ce4e283bd5544be2a3e47dffa8a04616",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fa75968f4d2345dc9c17d0edb234c7db",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7a3d46c441f742268f44d1ab34c5cb38",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "793de23a0c2c4f2bae45731ef6ae28e9",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e785c04dc86a4eafa6c6fc278d4fe1bc",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "931d6c0ab3e3404395c44e13d048e644",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d2d109a0acb841e2ad567236db560e7c",
          "Name": "OUT",
          "Description": "Ergebnis des Python-Skripts",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.WallTypes, DSRevitNodesUI",
      "SelectedIndex": 18,
      "SelectedString": "Generic - 300mm",
      "NodeType": "ExtensionNode",
      "Id": "f30b125359f14000a76fa5c133fb3543",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "da786ad9c2324f788dc3112e82b677d7",
          "Name": "Wall Type",
          "Description": "Die ausgewählte Wall Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All wall types available in the document."
    },
    {
      "ConcreteType": "DSRevitNodesUI.WallTypes, DSRevitNodesUI",
      "SelectedIndex": 18,
      "SelectedString": "Generic - 300mm",
      "NodeType": "ExtensionNode",
      "Id": "9abbe9e09e324c899a59bdff2eca4aa8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9c01fa3cad20409dbdcd375612fa4c8e",
          "Name": "Wall Type",
          "Description": "Die ausgewählte Wall Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All wall types available in the document."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FloorTypes, DSRevitNodesUI",
      "SelectedIndex": 5,
      "SelectedString": "Generic 300mm",
      "NodeType": "ExtensionNode",
      "Id": "40bb13f55e2f49fa852ce792d05d6883",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9bf6ec29a49e4c13b6b0397da06c4f03",
          "Name": "Floor Type",
          "Description": "Die ausgewählte Floor Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All floor types available in the document."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 4.0,
      "MinimumValue": 2.0,
      "StepValue": 1.0,
      "InputValue": 2.0,
      "Id": "ac1bad5b4a9e4b1cabcdfd715b9e5da5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "930889da4d4d423b863c113519287359",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 15.0,
      "MinimumValue": 2.0,
      "StepValue": 1.0,
      "InputValue": 3.0,
      "Id": "6eda79a2c2e040078d1fd66754c14bd9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "847871052710423085f7a6128caa335c",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 15.0,
      "MinimumValue": 2.0,
      "StepValue": 1.0,
      "InputValue": 3.0,
      "Id": "d441a2d6f0c14ff48dd4597348011063",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b800d4a6f1c4478887101fb376c5fef6",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 60.0,
      "MinimumValue": 20.0,
      "StepValue": 5.0,
      "InputValue": 25.0,
      "Id": "7e346971f5c24f37a17e4b6625f1dfd8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "18f34a600a404da18eb08d07bc812f06",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 40.0,
      "MinimumValue": 10.0,
      "StepValue": 5.0,
      "InputValue": 20.0,
      "Id": "584bef6044484045b318ed18b4ef189a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "12a26aaf908b4bab95840ba4dc85eaa6",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Phython-Standard- und DesignScript-Bibliotheken laden\r\nimport sys\r\nimport os\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Die Eingaben für diesen Block werden in Form einer Liste in den IN-Variablen gespeichert.\r\ndataEnteringNode = IN\r\n\r\n# Code unterhalb dieser Linie platzieren\r\nsite_x = int(IN[0])                                # the overall length of the site\r\nsite_y = int(IN[1])                                # the overall widthness of the site\r\nCORR_WIDTH = int(IN[2]) # convert_meter_to_unit(3)\r\nNUM_ROOMS_SHORT_SIDE = int(IN[3])\r\nNUM_ROOMS_LONG_SIDE = int(IN[4])\r\nINCLUDE_BOTTLENECK = bool(IN[5])\r\n#store_dir = IN[6]\r\n#layout_name = IN[7]\r\n\r\n\r\ntxt_filename = \\\r\n    'floorplan_siteX_'+str(int(site_x))+'_siteY_'+str(int(site_y))+'_CORRWIDTH_'+str(CORR_WIDTH)+ '_NUMROOMS_'+str(NUM_ROOMS_SHORT_SIDE)+'_'+str(NUM_ROOMS_LONG_SIDE)+'_INCBNECK_'+str(INCLUDE_BOTTLENECK)+'.txt'\r\n# Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\nOUT = txt_filename, [site_x, site_y, CORR_WIDTH, NUM_ROOMS_SHORT_SIDE, NUM_ROOMS_LONG_SIDE, INCLUDE_BOTTLENECK]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "a296cde849384991a7ca241cbc98f5fb",
      "Inputs": [
        {
          "Id": "3431a07f7f8f4c9897236498223dba3c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "647a974d6a684543a040e83c36da759d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4c1765db052946249c7dfe061daf2f0a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "34347bf83d5a4d6aa31f30e60c8ea79d",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7b591e97eb804a8c9c92795d1a27d5c2",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d16b8090d0346c293f5ef6dcf388afb",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb90d5b34b1b4d5f82f76b475484ba71",
          "Name": "OUT",
          "Description": "Ergebnis des Python-Skripts",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "a4e31f61d6e142a69577153b5065a6bf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "df8d276d2094405fae1bd75149a31f04",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.915,
      "Id": "70fcc779d10b4e938be946e767918ee3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8d3bf1da095642f599a8d81544fe2b93",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.8,
      "Id": "6f1a4e47855a4b5585aab50009ce3e5c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a89419cf1b51448eb515ea3a35dce344",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "642c0dc4c5f945a291c5b48263a7912e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6550584e1d7b49e6800bd273ec1a7e76",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Selection between a true and false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 640.0,
      "Id": "69961faf99e747c196644069ed5d4ea7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6798c119db7c40e7b7ef37d1151cacc3",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 640.0,
      "Id": "aab17e32e15a4b76b21eb0e8944b4307",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "69cb8e815f734e1898163a8e2879faab",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nfrom System.Collections.Generic import List\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\nif UnwrapElement(IN[0]) : \r\n    viewId = IN[1]\r\n    elementId = ElementId(viewId)\r\n    view = doc.GetElement(elementId)\r\n\r\n    elevationArrows = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Elev).ToElementIds()\r\n    viewers = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Viewers).ToElementIds()\r\n    \r\n    if elevationArrows and viewers :\r\n        view.HideElements(List[ElementId](elevationArrows))\r\n        view.HideElements(List[ElementId](viewers))\r\n        \r\n        TransactionManager.Instance.TransactionTaskDone()\r\n        \r\n        OUT = 1\r\n        \r\n    else :\r\n        OUT = 0",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "f35e214806394a3a9dc0d4619796ee1b",
      "Inputs": [
        {
          "Id": "f7de0eede8344f88b73eb2add8251f9a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8bccc8c595f14beeab1c6fcb9b2cc0df",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "64fcd170427f4369ba17b544d0b19a80",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#IN[0]: Create Floor plan or not (boolean)\r\n\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef OverrideColorPattern(element, color, pattern, view):\r\n    graphicSettings = OverrideGraphicSettings()\r\n    graphicSettings.SetSurfaceForegroundPatternColor(color)\r\n    graphicSettings.SetCutForegroundPatternColor(color)\r\n    graphicSettings.SetSurfaceForegroundPatternId(UnwrapElement(pattern).Id)\r\n    graphicSettings.SetCutForegroundPatternId(UnwrapElement(pattern).Id)\r\n    UnwrapElement(view).SetElementOverrides(element.Id, graphicSettings)\r\n\r\nif UnwrapElement(IN[0]) : \r\n    viewId = IN[1]\r\n    elementId = ElementId(viewId)\r\n    view = doc.GetElement(elementId)\r\n\r\n    black = Color(0, 0, 0)\r\n    \r\n    walls = FilteredElementCollector(doc).OfClass(Wall)\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    \r\n    fillPatterns = FilteredElementCollector(doc).OfClass(FillPatternElement)\r\n    solidPattern = None\r\n    for pattern in fillPatterns:\r\n        if UnwrapElement(pattern).GetFillPattern().IsSolidFill:\r\n            solidPattern = pattern\r\n            break\r\n    \r\n    if solidPattern : \r\n        for wall in walls:\r\n            OverrideColorPattern(wall, black, solidPattern, view)\r\n    \r\n        TransactionManager.Instance.TransactionTaskDone()\r\n        OUT = 1\r\n    else : \r\n        OUT = 0\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "3106a787001843e7ae1586390c237861",
      "Inputs": [
        {
          "Id": "42e5f23ca5324b429d30e4ded770669a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1bb32dbd1bae4c55917622bced4e8e34",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2abd18bf03094fbc8a22cea686c7cfe9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Directory, CoreNodeModels",
      "HintPath": "D:\\Work\\TUM_Research\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies\\DynamoVEnv",
      "InputValue": "D:\\Work\\TUM_Research\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies\\DynamoVEnv",
      "NodeType": "ExtensionNode",
      "Id": "9a614a417e0c42f8921b57863f782f06",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "416de6a731e2479f952ca375196fb4f1",
          "Name": "",
          "Description": "Directory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a directory on the system to get its path"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#IN[1]: view element id\r\n\r\nimport clr\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nif UnwrapElement(IN[0]) : \r\n    doc = DocumentManager.Instance.CurrentDBDocument\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    \r\n    viewId = IN[1]\r\n    elementId = ElementId(viewId)\r\n    view = doc.GetElement(elementId)\r\n    \r\n    view.CropBoxActive = False\r\n    view.CropBoxVisible = False\r\n    \r\n    TransactionManager.Instance.TransactionTaskDone()\r\n    \r\n    OUT = 1",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "9ec485d6907a401aa15548f440cdd5e8",
      "Inputs": [
        {
          "Id": "db261a26c419451ebfe326438fc6c733",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d484e6a1fa164544a54da47873d19694",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c80520e02a5243f9925ddb9aeed5ad68",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nif UnwrapElement(IN[0]):\r\n    doc = DocumentManager.Instance.CurrentDBDocument\r\n    \r\n    \r\n    floorCategoryId = BuiltInCategory.OST_Floors\r\n    \r\n    \r\n    activeView = doc.ActiveView\r\n    \r\n    \r\n    floorCategory = Category.GetCategory(doc, floorCategoryId)\r\n    \r\n    \r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n    activeView.SetCategoryHidden(floorCategory.Id, False)\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n    \r\n    OUT = 1",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "571a00e1551644fa8f42a276b217a31e",
      "Inputs": [
        {
          "Id": "c6a3a74970274941bec7166c8aa5a1d6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88b94ac8d9044268b5d2e918a278f7e9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#IN[0]: room dict.\r\n\r\nimport clr\r\nfrom System.Drawing import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom Autodesk.Revit.DB import *\r\n\r\ndef extract_lists_with_string(room_dict, type):\r\n    extracted_lists = []\r\n    for key in room_dict:\r\n        if type in key:\r\n            extracted_lists.append(room_dict[key])\r\n    return extracted_lists\r\n    \r\nif UnwrapElement(IN[1]) :  \r\n    dict = IN[0]\r\n    \r\n    origins = extract_lists_with_string(dict , \"ORIGIN\")\r\n    destinations = extract_lists_with_string(dict , \"DESTINATION\")\r\n    obstacles = extract_lists_with_string(dict , \"OBSTACLE\")\r\n\r\n    OUT = origins , destinations , obstacles",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "3f38ec1bd27245e4b91b612f2938f245",
      "Inputs": [
        {
          "Id": "a2cce34ef3104ac1b25c06a447470323",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "376e458f9414424f9ab71a715bcc02ea",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e869cae4f4594e51a8039056990a8811",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n\r\ndef slab_geometry_by_level(x, y, level, delta_z , start_x , start_y):\r\n    zz = level.Elevation + delta_z\r\n    xx = x + start_x\r\n    yy = y + start_y\r\n    line_1 = Line.CreateBound(XYZ(start_x, start_y, zz), XYZ(xx, start_y, zz))\r\n    line_2 = Line.CreateBound(XYZ(xx, start_y, zz), XYZ(xx, yy, zz))\r\n    line_3 = Line.CreateBound(XYZ(xx, yy, zz), XYZ(start_x, yy, zz))\r\n    line_4 = Line.CreateBound(XYZ(start_x, yy, zz), XYZ(start_x, start_y, zz))\r\n\r\n    slab_geometry = CurveArray()\r\n    slab_geometry.Append(line_1)\r\n    slab_geometry.Append(line_2)\r\n    slab_geometry.Append(line_3)\r\n    slab_geometry.Append(line_4)\r\n    return slab_geometry\r\n\r\ndef override_color_pattern(element, color, pattern, view):\r\n    graphicSettings = OverrideGraphicSettings()\r\n    graphicSettings.SetSurfaceForegroundPatternColor(color)\r\n    graphicSettings.SetCutForegroundPatternColor(color)\r\n    graphicSettings.SetSurfaceForegroundPatternId(UnwrapElement(pattern).Id)\r\n    graphicSettings.SetCutForegroundPatternId(UnwrapElement(pattern).Id)\r\n    graphicSettings.SetSurfaceBackgroundPatternId(UnwrapElement(pattern).Id)\r\n    graphicSettings.SetCutBackgroundPatternId(UnwrapElement(pattern).Id)\r\n    graphicSettings.SetProjectionLineColor(color)\r\n    UnwrapElement(view).SetElementOverrides(element.Id, graphicSettings)\r\n\r\ndef convert_meter_to_unit(pre_value):\r\n    tempo_list = []\r\n    tempo_value = 0\r\n    if isinstance(pre_value, list):\r\n        len_list = len(pre_value)\r\n        for ii in range(len_list):\r\n            tempo_list.append (float(UnitUtils.ConvertToInternalUnits(pre_value[ii], UnitTypeId.Meters)))\r\n        pre_value = tempo_list\r\n    else:\r\n        tempo_value = float(UnitUtils.ConvertToInternalUnits(pre_value, UnitTypeId.Meters))\r\n        pre_value = tempo_value\r\n    return pre_value\r\n\r\ndef create_colored_floor(length , width , start_x , start_y , level , doc , color) : \r\n    floor_geometry = slab_geometry_by_level(length, width, level, 1. , start_x , start_y)\r\n\r\n    floor = doc.Create.NewFloor(floor_geometry, True)\r\n\r\n    override_color_pattern(floor, color, solidPattern, view)\r\n\r\n\r\nif IN[0] : \r\n    view_id = IN[1]\r\n    element_id = ElementId(view_id)\r\n    view = doc.GetElement(element_id)\r\n\r\n    origins, destinations , obstacles = IN[0]\r\n\r\n    level = view.GenLevel\r\n\r\n    TransactionManager.Instance.EnsureInTransaction(doc)\r\n\r\n    fillPatterns = FilteredElementCollector(doc).OfClass(FillPatternElement)\r\n    solidPattern = None\r\n    for pattern in fillPatterns:\r\n        if UnwrapElement(pattern).GetFillPattern().IsSolidFill:\r\n            solidPattern = pattern\r\n            break\r\n\r\n    if solidPattern : \r\n        red = Color(255 , 0 , 0)\r\n        green = Color(0 , 255 , 0)\r\n        black = Color(0 , 0 , 0)\r\n\r\n        for origin in origins : \r\n            origin_bbox = convert_meter_to_unit([*origin[0], *origin[1]])\r\n\r\n            start_x , start_y = origin_bbox[0] , origin_bbox[1]\r\n\r\n            size_x = origin_bbox[2] - origin_bbox[0]\r\n            size_y = origin_bbox[3] - origin_bbox[1]\r\n\r\n            create_colored_floor(size_x , size_y , start_x , start_y , level , doc , red)\r\n        for destination in destinations : \r\n            destination_bbox = convert_meter_to_unit([*destination[0], *destination[1]])\r\n\r\n            start_x , start_y = destination_bbox[0] , destination_bbox[1]\r\n\r\n            size_x = destination_bbox[2] - destination_bbox[0]\r\n            size_y = destination_bbox[3] - destination_bbox[1]\r\n\r\n            create_colored_floor(size_x , size_y , start_x , start_y , level , doc , green)\r\n        \r\n        for obstacle in obstacles : \r\n            obstacle_bbox = convert_meter_to_unit([*obstacle[0], *obstacle[1]])\r\n\r\n            start_x , start_y = obstacle_bbox[0] , obstacle_bbox[1]\r\n\r\n            size_x = obstacle_bbox[2] - obstacle_bbox[0]\r\n            size_y = obstacle_bbox[3] - obstacle_bbox[1]\r\n\r\n            create_colored_floor(size_x , size_y , start_x , start_y , level , doc , black)\r\n\r\n        TransactionManager.Instance.TransactionTaskDone()\r\n        OUT = 1\r\n    else : \r\n        OUT = 0\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4eb3e210df8c436c8fe01423c9f8db75",
      "Inputs": [
        {
          "Id": "d7b8da2a76d246deb09224f37bc5dbf5",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b503e4d4fc0a4383bf8453c8b7e5eef4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "60080b7de4334cf380c535ae11014aaa",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# IN[0] Element id of view\r\n\r\nimport clr\r\nimport System\r\nfrom System.IO import *\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nimport tempfile\r\n\r\nif UnwrapElement(IN[1]) : \r\n    doc = DocumentManager.Instance.CurrentDBDocument\r\n    \r\n    viewId = IN[0]\r\n    elementId = ElementId(viewId)\r\n    view = doc.GetElement(elementId)\r\n    \r\n    screenshot_of_view_path = tempfile.mktemp(suffix=\".png\")\r\n    \r\n    options = ImageExportOptions()\r\n    options.ExportRange = ExportRange.CurrentView\r\n    options.ViewName = view.Name\r\n    options.FilePath = screenshot_of_view_path\r\n    options.ZoomType = ZoomFitType.Zoom\r\n    options.PixelSize = 2048\r\n    \r\n    doc.ExportImage(options)\r\n    \r\n    saved_image_path = f\"{screenshot_of_view_path[:-3]}jpg\" # Saving as JPG format (unusual behavior)\r\n    \r\n    \r\n    OUT = saved_image_path\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "443e7cb5b46144bca29d334d28a2fe57",
      "Inputs": [
        {
          "Id": "8b6d42444a5845c5802641540cf4f96f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c644a32e194e4a259337968ba3c43306",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db1c9a1dd7a240b99e8b04cc633a7611",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# IN[0] Element id of view\r\n\r\nimport clr\r\nimport System\r\nfrom System.IO import *\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('System.Drawing')\r\nimport System.Drawing\r\nfrom System.Drawing import *\r\n\r\nif IN[0] : \r\n    result = Image.FromFile(IN[0])\r\n    \r\n    OUT = result\r\n    ",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "1d68dd79e8f54706a8b4ba34bbdaf906",
      "Inputs": [
        {
          "Id": "8d015dc0f5224b04b0ac58a185ae5bac",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bf400ed61b9742d584bfd4cf010ef802",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.WatchImageCore, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "637092e3c50f402983872170eb45d477",
      "Inputs": [
        {
          "Id": "876f159b324c4ccab952897115883839",
          "Name": "image",
          "Description": "Image for visualization",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6ec5fce68214bf3b1a5346262ce2ccb",
          "Name": "image",
          "Description": "Image for visualization",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Previews an image"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\nimport os\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nif IN[0] and IN[1] and IN[2] and IN[3] : \r\n    # sys.path.append(r'D:\\Work\\TUM_Research\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies\\DynamoVEnv\\lib\\site-packages')\r\n    # sys.path.\r\n    package_path = fr\"{IN[1]}\\lib\\site-packages\"\r\n    checkpoint_path = fr\"{IN[2]}\\model_epoch=45-step=230000.pth\"\r\n    gif_export_path = IN[3]\r\n\r\n    if os.path.isdir(package_path) and os.path.isdir(gif_export_path) and os.path.exists(checkpoint_path):\r\n        OUT = 1\r\n    else : \r\n        raise ImportError(\"VEnv not found. Make sure the venv path is correct and the venv contains opencv-python and numpy. The venv should also use the same python version as dynamo.\")\r\n        \r\nelse : \r\n    raise ImportError(\"Choose all three paths for this part of the code to work properly.\")",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "8bfa90b9112e4e23a68fc39756efa4e1",
      "Inputs": [
        {
          "Id": "ae17fb0ac8b443959615d41e1d05fc4c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "95775af539bb4fe7894be58765b6ea9d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b3e6de00acf4699a43fefa197101759",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "501d7b29d17845baa1b8764d5eda9efc",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c56e9e53a1014cb6a9a3a416fbc2d7c0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# IN[0] Element id of view\r\n\r\nimport clr\r\nimport System\r\nimport sys\r\nfrom System.IO import *\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import *\r\nimport tempfile\r\n\r\nif UnwrapElement(IN[0]) and IN[1] : \r\n    package_path = fr\"{IN[1]}\\lib\\site-packages\"\r\n    sys.path.append(package_path)\r\n    import cv2\r\n    import numpy as np\r\n\r\n    image_path = UnwrapElement(IN[0])\r\n    image = cv2.imread(image_path)\r\n    image_height , image_width , _ = image.shape\r\n\r\n    padded_image_width = int(IN[2])\r\n    padded_image_height = int(IN[3])\r\n\r\n    site_x = 25\r\n    site_y = 20\r\n    new_image_dimensions = [site_x * 10 , site_y * 10]\r\n    \r\n    padded_image = np.zeros((padded_image_height, padded_image_width , 3), dtype=np.uint8)\r\n    padded_image_centers = [\r\n        int(dim / 2) for dim in [padded_image_width , padded_image_height]\r\n    ]\r\n\r\n    # using different interpolation order for upsizing and downsizing\r\n    if site_x * 10 > image_width and site_y * 10 > image_height : \r\n        scaled_image = cv2.resize(image, tuple(new_image_dimensions), interpolation=cv2.INTER_CUBIC)\r\n    else : \r\n        scaled_image = cv2.resize(image, tuple(new_image_dimensions), interpolation=cv2.INTER_AREA)\r\n\r\n    origin_in_padded_image = [\r\n        int(padded_image_centers[i] - new_image_dimensions[i] / 2) for i in range(2)\r\n    ]\r\n\r\n    padded_image[\r\n        origin_in_padded_image[1] : origin_in_padded_image[1] + new_image_dimensions[1] , origin_in_padded_image[0] : origin_in_padded_image[0] + new_image_dimensions[0]\r\n    ] = scaled_image\r\n\r\n    padded_image_path = tempfile.mktemp(suffix=\".png\")\r\n    cv2.imwrite(padded_image_path , padded_image)\r\n\r\n    OUT = padded_image_path\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "24b0032991f94b51aebdd285c0820000",
      "Inputs": [
        {
          "Id": "885a14315f0940dead09c89188cf8326",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "db03b9ae409345eab215ed70827d8ab6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "78e77e68f8514c088e93a90194e4577e",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edfc38076a79441eb201fd4f83041922",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b8f5cd8986714c41afed88f4e87d4e09",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import sys\r\npackage_path = fr\"{IN[0]}\\lib\\site-packages\"\r\nsys.path.append(package_path)\r\n\r\nimport torch\r\nimport torch.nn as nn\r\nimport torch.nn.functional as F\r\nfrom torch import einsum, nn\r\nfrom torchvision import transforms\r\nfrom transformers.models.beit.modeling_beit import BeitEncoder, BeitLayer, BeitModelOutputWithPooling, BeitEmbeddings, BeitRelativePositionBias, BeitConfig\r\nfrom transformers.activations import ACT2FN\r\nfrom transformers.modeling_outputs import BaseModelOutput\r\nimport numpy as np\r\nfrom einops import rearrange, repeat\r\nimport PIL\r\nfrom PIL import Image as PilImage\r\nimport matplotlib.pyplot as plt\r\nfrom collections import OrderedDict\r\nimport math\r\nimport tempfile\r\n\r\nif UnwrapElement(IN[0]) and UnwrapElement(IN[1]) and UnwrapElement(IN[2]) : \r\n# if 1 : \r\n    class MyModel(nn.Module):\r\n        def __init__(self, mode, output_channels, num_heads, additional_info, config) -> None:\r\n            super().__init__()\r\n\r\n            assert mode in ['denseClass_wEvac', 'density_class']\r\n            # assert additional_info == True\r\n            self.mode = mode\r\n            self.additional_info = additional_info\r\n\r\n            # Sequence? TF or visual TF\r\n            # TODO last layer --> BN,  so far 68472 samples, with corr_edge it is 130356\r\n            # --[CHECK]-- positional embedding yes/no? if yes, self.position_embeddings + emb or like CoCa?\r\n            # --[CHECK]-- attention pooling for image tokens (CoCa)\r\n            # loss functions (wCE vs Tversky)\r\n            # img reading (padded vs raw)\r\n            # network: self.attention_key/val/qu  VS.  q, k, v, ff = self.fused_attn_ff_proj(x).split(self.fused_dims, dim=-1) (CoCa)\r\n            # --[CHECK]-- marriage: how (cross attention vs concatenation) and where (before/after)\r\n\r\n            # contrastive loss?\r\n            self.decoder_mode = config['decoder_mode']\r\n            self.settings = config['settings']\r\n            self.output_channels = output_channels\r\n            self.num_frames = num_heads\r\n            self.add_info_length = 5 \r\n            self.final_conv_batch = self.settings['final_conv_batch'] if 'final_conv_batch' in self.settings else False\r\n\r\n            self.output_hidden_states = False\r\n            self.marriage_mode = self.settings['marriage_mode'] # 0=before, 1=during, 2=after\r\n            if self.marriage_mode == 1: raise NotImplementedError('During attention requires as many CrossAttention layers as TF layers')\r\n            \r\n            # EMBEDDING IMAGE\r\n            self.patch_size = 16\r\n            self.num_channels = 3\r\n            self.hidden_size = self.settings['hidden_size'] # 768 as default\r\n\r\n            self.image_size = (640, 640) # None\r\n            self.window = (self.image_size[0] // self.patch_size, self.image_size[1] // self.patch_size) if self.image_size is not None else None\r\n\r\n            # BEIT LAYERS\r\n            # beit_model_config = BeitForSemanticSegmentation.from_pretrained('microsoft/beit-base-finetuned-ade-640-640').config\r\n            from transformers.models.beit.modeling_beit import BeitConfig\r\n            beit_model_config = BeitConfig.from_pretrained('microsoft/beit-base-finetuned-ade-640-640')\r\n            beit_model_config.num_hidden_layers = config['num_hidden_img_layers']\r\n            \"\"\"config_pretrained = beit_model.config\r\n            config_pretrained.hidden_size = self.hidden_size\r\n            config_pretrained.use_mask_token = False\r\n            config_pretrained.use_absolute_position_embeddings = False\r\n            config_pretrained.hidden_dropout_prob = 0.0\r\n            config_pretrained.image_size = 640\r\n            config_pretrained.patch_size = 16\r\n            config_pretrained.num_channels = 3\r\n            config_pretrained.layer_norm_eps = 1e-12\r\n            config_pretrained.use_mean_pooling = True\r\n            config_pretrained.use_shared_relative_position_bias = True \"\"\"\r\n            # self.beit = BeitModel(beit_model_config)\r\n\r\n            self.beit_embeddings = BeitEmbeddings(beit_model_config)\r\n            self.encoder = BeitEncoder(beit_model_config)\r\n            \r\n            dpr = [x.item() for x in torch.linspace(0, beit_model_config.drop_path_rate, beit_model_config.num_hidden_layers)]\r\n            self.encoder.layer = nn.ModuleList([\r\n                nn.ModuleList([\r\n                    BeitLayer(beit_model_config,\r\n                        window_size=self.beit_embeddings.patch_embeddings.patch_shape if beit_model_config.use_relative_position_bias else None,\r\n                        drop_path_rate=dpr[i],\r\n                    ),\r\n                    CrossAttention(dim=self.hidden_size, context_dim=self.hidden_size, dim_head=64, heads=12, norm_context=True, ff_mult=True)\r\n                ]) for i in range(beit_model_config.num_hidden_layers)\r\n            ])\r\n\r\n            self.encoder.forward = self.forward_encoder  \r\n\r\n            # EMBEDDING SIMULATION PARAMETERS\r\n            if self.additional_info:\r\n                # distr\r\n                # assert (self.hidden_size / self.add_info_length).is_integer()\r\n                # self.od_distances_embedding = nn.Linear(16, self.hidden_size) # //self.add_info_length)\r\n                self.origin_embedding = nn.Embedding(8, self.hidden_size) # nn.Linear(1, self.hidden_size) \r\n                self.destination_embedding = nn.Embedding(2, self.hidden_size) # nn.Linear(1, self.hidden_size)\r\n                self.num_agents_embedding = nn.Embedding(3, self.hidden_size) # nn.Linear(1, self.hidden_size)\r\n                self.fp_size_embedding = nn.Linear(2, self.hidden_size)\r\n                self.vel_embedding = nn.Embedding(3, self.hidden_size) # nn.Linear(1, self.hidden_size)\r\n                self.input_emb_scale = 8\r\n\r\n                self.input_embedding = nn.Linear(self.add_info_length * self.hidden_size, self.add_info_length * self.hidden_size)\r\n                # self.input_embedding = nn.Linear(self.add_info_length * self.hidden_size, self.input_emb_scale * self.hidden_size)\r\n            if mode=='denseClass_wEvac':\r\n                self.evac_preprocess = nn.Linear(self.add_info_length * self.hidden_size,self.add_info_length * self.hidden_size) \r\n                self.evac_predictor = nn.Linear(self.add_info_length * self.hidden_size, 1)\r\n\r\n                # several layers?\r\n                self.num_hidden_ca_layers = self.settings['num_hidden_ca_layers']\r\n                # self.marriage_att = CrossAttention(dim=self.hidden_size, context_dim=self.hidden_size, dim_head=64, heads=12, norm_context=True, ff_mult=True)\r\n                self.marriage_att = nn.ModuleList([\r\n                    CrossAttention(dim=self.hidden_size, context_dim=self.hidden_size, dim_head=64, heads=12, norm_context=True, ff_mult=True) for i in range(self.num_hidden_ca_layers)\r\n                ])\r\n                # also cross attention here?\r\n\r\n\r\n            if self.settings['use_pe']:\r\n                # self.positional_embedding = nn.Parameter(torch.zeros(1, num_patches + 1, config.hidden_size))\r\n                max_len = 10000\r\n                self.positional_encoding = torch.zeros(max_len, self.hidden_size)\r\n                position = torch.arange(0, max_len).unsqueeze(1).float()\r\n                div_term = torch.exp(torch.arange(0, self.hidden_size, 2).float() * -(math.log(10000.0) / self.hidden_size))\r\n                self.positional_encoding[:, 0::2] = torch.sin(position * div_term)\r\n                self.positional_encoding[:, 1::2] = torch.cos(position * div_term)\r\n                self.positional_encoding = self.positional_encoding.unsqueeze(0)\r\n\r\n            if self.settings['attn_pooling']:\r\n                # attention pooling for image tokens\r\n                self.img_queries = nn.Parameter(torch.randn(self.hidden_size, self.hidden_size)) # 256, self.hidden_size))\r\n                self.img_attn_pool = CrossAttention(dim=self.hidden_size, context_dim=self.hidden_size, dim_head=64, heads=12, norm_context=True)\r\n                self.img_attn_pool_norm = nn.LayerNorm(self.hidden_size)\r\n                \r\n\r\n            # HOW TO DECODE FROM hidden_states\r\n            if self.decoder_mode == 'fpn':\r\n                from transformers.models.beit.modeling_beit import BeitUperHead, BeitConfig\r\n                self.output_hidden_states = True\r\n                # FPN\r\n                self.out_indices = [3, 5, 7, 11]\r\n\r\n                self.fpn1 = nn.Sequential(\r\n                    nn.ConvTranspose2d(self.hidden_size, self.hidden_size, kernel_size=2, stride=2),\r\n                    nn.BatchNorm2d(self.hidden_size),\r\n                    nn.GELU(),\r\n                    nn.ConvTranspose2d(self.hidden_size, self.hidden_size, kernel_size=2, stride=2),\r\n                )\r\n                self.fpn2 = nn.Sequential(\r\n                    nn.ConvTranspose2d(self.hidden_size, self.hidden_size, kernel_size=2, stride=2),\r\n                )\r\n                self.fpn3 = nn.Identity()\r\n                self.fpn4 = nn.MaxPool2d(kernel_size=2, stride=2)\r\n\r\n                # Semantic segmentation head(s)           \r\n                self.decode_head = BeitUperHead(beit_model_config)\r\n                self.decode_head.classifier = ClassMovieClassifier(self.hidden_size, self.output_channels, self.num_frames, self.final_conv_batch)\r\n                # nn.ModuleList(\r\n                #     [nn.Sequential(\r\n                #         nn.Conv2d(self.hidden_size, self.output_channels, kernel_size=1), \r\n                #         nn.ReLU()) for i in range(self.num_frames)]\r\n                # )\r\n\r\n            elif self.decoder_mode == 'trans_conv':\r\n                self.tc1 = nn.Sequential(\r\n                    nn.ConvTranspose2d(self.hidden_size, self.hidden_size, kernel_size=2, stride=2),\r\n                    nn.BatchNorm2d(self.hidden_size),\r\n                    nn.GELU(),\r\n                    nn.ConvTranspose2d(self.hidden_size, self.hidden_size, kernel_size=2, stride=2),\r\n                )\r\n                self.tc2 = nn.Sequential(\r\n                    nn.ConvTranspose2d(self.hidden_size, self.hidden_size, kernel_size=2, stride=2),\r\n                )\r\n                self.tc3 = nn.MaxPool2d(kernel_size=2, stride=2)\r\n\r\n                self.decode_head = ClassMovieClassifier(self.hidden_size, self.output_channels, self.num_frames, self.final_conv_batch) \r\n\r\n            self.apply(self._initialize_weights)\r\n\r\n        \r\n        def _initialize_weights(self, m):\r\n            if hasattr(m, 'weight'):\r\n                try:\r\n                    torch.nn.init.xavier_normal_(m.weight)\r\n                    # torch.nn.init.normal_(m.weight, mean=0, std=0.1)\r\n                    # m.weight.data.uniform_(-0.1, 0.1)\r\n                except ValueError:\r\n                    # Prevent ValueError(\"Fan in and fan out can not be computed for tensor with fewer than 2 dimensions\")\r\n                    m.weight.data.uniform_(-0.2, 0.2)\r\n                    # print(\"Bypassing ValueError...\")\r\n            elif hasattr(m, 'bias'):\r\n                m.bias.data.zero_()\r\n\r\n\r\n        def forward(self, pixel_values: torch.Tensor, add_info = None) -> torch.Tensor:\r\n            batch_size, num_channels, height, width = pixel_values.shape\r\n            assert height % self.patch_size == 0 and width % self.patch_size == 0, 'Image size not patchable!'\r\n\r\n            if add_info is not None:\r\n                # distances = add_info[0]\r\n                num_origins_id = add_info[0]-1\r\n                num_destinations_id = add_info[1]-1\r\n                num_agents_id= add_info[2]\r\n                fp_size = add_info[3]\r\n                velocity_id = add_info[4]\r\n\r\n                if fp_size.ndim == 1:\r\n                    fp_size = fp_size.unsqueeze(0)\r\n\r\n                or_emb = self.origin_embedding(num_origins_id)\r\n                dest_emb = self.destination_embedding(num_destinations_id)\r\n                num_ag_emb = self.num_agents_embedding(num_agents_id)\r\n                fp_size_emb = self.fp_size_embedding(fp_size)\r\n                vel_emb = self.vel_embedding(velocity_id)\r\n\r\n                info_emb = torch.cat((or_emb, dest_emb, num_ag_emb, fp_size_emb, vel_emb), dim=-1)\r\n                info_emb = self.input_embedding(info_emb).view(batch_size, self.add_info_length, self.hidden_size)\r\n\r\n            # if self.settings['use_pe']:\r\n            #     add_me = self.positional_encoding[:, :hidden_states.size(1), :].repeat(batch_size, 1, 1).to(hidden_states.device)\r\n            #     hidden_states = hidden_states + add_me\r\n            \r\n            embedding_output = self.beit_embeddings(pixel_values, None)\r\n\r\n            encoder_outputs = self.encoder(\r\n                embedding_output,\r\n                info_emb,\r\n                bool_masked_pos = None,\r\n                head_mask = None,\r\n                output_attentions = None,\r\n                output_hidden_states = True,\r\n                return_dict = True,\r\n            )\r\n            sequence_output = encoder_outputs[0]\r\n\r\n            beit_model_output = BeitModelOutputWithPooling(\r\n                last_hidden_state=sequence_output,\r\n                pooler_output=None,\r\n                hidden_states=encoder_outputs.hidden_states,\r\n                attentions=encoder_outputs.attentions,\r\n            )\r\n\r\n            hidden_states = beit_model_output.last_hidden_state\r\n            all_hidden_states = beit_model_output.hidden_states\r\n            \r\n            if self.settings['attn_pooling']:\r\n                img_queries = repeat(self.img_queries, 'n d -> b n d', b=hidden_states.shape[0])\r\n                img_queries = self.img_attn_pool(img_queries, hidden_states)\r\n                img_queries = self.img_attn_pool_norm(img_queries)\r\n        \r\n            # patch_resolution * 4\r\n            if self.decoder_mode == 'fpn':\r\n                # FPNs: input: (640, 640), hidden_states: (2, 1600, 768) --> (2, 5, 160, 160)  //  input: (768, 256), hidden_states: (2, 768, 768) --> (2, 5, 192, 64)\r\n                features = [feature for idx, feature in enumerate(all_hidden_states) if idx + 1 in self.out_indices]\r\n                batch_size = hidden_states.size()[0] # pixel_values.shape[0]\r\n                patch_resolution_h, patch_resolution_w = height // self.patch_size, width // self.patch_size\r\n                # reshape hidden states\r\n                features = [\r\n                    x[:,1:,:].permute(0, 2, 1).reshape(batch_size, -1, patch_resolution_h, patch_resolution_w) for x in features\r\n                ]\r\n                \r\n                ops = [self.fpn1, self.fpn2, self.fpn3, self.fpn4]\r\n                for i in range(len(features)):\r\n                    features[i] = ops[i](features[i])\r\n                \r\n                logits = self.decode_head(features)\r\n                logits = torch.stack(logits, dim=2).squeeze()\r\n\r\n            # patch_resolution * 4\r\n            elif self.decoder_mode == 'trans_conv':\r\n                patch_resolution_h, patch_resolution_w = height // self.patch_size, width // self.patch_size\r\n                features = hidden_states.permute(0, 2, 1).reshape(batch_size, -1, patch_resolution_h, patch_resolution_w)\r\n\r\n                for tc in [self.tc1, self.tc2, self.tc3]:\r\n                    features = tc(features)\r\n                \r\n                logits = self.decode_head(features)\r\n                logits = torch.stack(logits, dim=2).squeeze()\r\n\r\n                \r\n            # MARRIAGE AFTER\r\n            if self.mode=='denseClass_wEvac' and add_info is not None:\r\n                info_emb_2 = torch.cat((or_emb, dest_emb, num_ag_emb, fp_size_emb, vel_emb), dim=-1)\r\n                info_emb_2 = self.evac_preprocess(info_emb_2)\r\n\r\n                # info_emb = self.marriage_att(info_emb, img_queries) if self.settings['attn_pooling'] else self.marriage_att(info_emb, hidden_states)\r\n                for marr_layer in self.marriage_att:\r\n                    info_emb = marr_layer(info_emb, hidden_states) # if self.settings['attn_pooling'] else marr_layer(info_emb, hidden_states)\r\n\r\n                info_emb = info_emb.flatten(start_dim=1)\r\n                info_emb = info_emb + info_emb_2\r\n                evac_prediction = self.evac_predictor(info_emb)\r\n                evac_prediction = nn.ReLU()(evac_prediction) # + upper theshold ReLU()?\r\n                evac_prediction = torch.multiply(evac_prediction, 100.)\r\n\r\n                return logits, evac_prediction\r\n            \r\n            return logits\r\n        \r\n\r\n        def forward_encoder(\r\n            self,\r\n            hidden_states,\r\n            vector_embeddings,\r\n            bool_masked_pos = None,\r\n            head_mask = None,\r\n            output_attentions = False,\r\n            output_hidden_states = True,\r\n            return_dict = True,\r\n        ):\r\n            # assuming relative_position_bias = None and gradient_checkpointing = False\r\n            all_hidden_states = () if output_hidden_states else None\r\n            all_self_attentions = () if output_attentions else None\r\n\r\n            for i, layer_modules in enumerate(self.encoder.layer):\r\n                if output_hidden_states:\r\n                    all_hidden_states = all_hidden_states + (hidden_states,)\r\n\r\n                beit_layer = layer_modules[0]\r\n                ca_layer = layer_modules[1]\r\n\r\n                layer_outputs = beit_layer(hidden_states, None, output_attentions, None)\r\n                layer_outputs = (ca_layer(layer_outputs[0], vector_embeddings), )\r\n\r\n                hidden_states = layer_outputs[0]\r\n\r\n                if output_attentions:\r\n                    all_self_attentions = all_self_attentions + (layer_outputs[1],)\r\n\r\n            if output_hidden_states:\r\n                all_hidden_states = all_hidden_states + (hidden_states,)\r\n\r\n            if not return_dict:\r\n                return tuple(v for v in [hidden_states, all_hidden_states, all_self_attentions] if v is not None)\r\n            return BaseModelOutput(\r\n                last_hidden_state=hidden_states,\r\n                hidden_states=all_hidden_states,\r\n                attentions=all_self_attentions,\r\n            )\r\n\r\n\r\n    class Layer(nn.Module):\r\n        def __init__(self, drop_path_rate=0.0, num_attention_heads=12, hidden_size=768, window=None) -> None:\r\n            super().__init__()\r\n            self.intermediate_size = 3072\r\n            self.dropout_rate = drop_path_rate\r\n            self.layer_scale_init_value = 0.1\r\n            self.window = window\r\n\r\n            # BeitSelfAttention (BeitAttention)\r\n            self.num_attention_heads = num_attention_heads\r\n            self.hidden_size = hidden_size\r\n            assert self.hidden_size % self.num_attention_heads == 0, f'The hidden size {self.hidden_size,} is not a multiple of num_attention_heads!'\r\n            self.attention_head_size = int(self.hidden_size / self.num_attention_heads)\r\n            self.all_head_size = self.num_attention_heads * self.attention_head_size\r\n\r\n            self.attention_query = nn.Linear(self.hidden_size, self.all_head_size)\r\n            self.attention_key = nn.Linear(self.hidden_size, self.all_head_size, bias=False)\r\n            self.attention_value = nn.Linear(self.hidden_size, self.all_head_size)\r\n            if self.window is not None:\r\n                config_pretrained = BeitConfig()\r\n                config_pretrained.num_attention_heads = self.num_attention_heads\r\n                self.attention_rel_pos_bias = BeitRelativePositionBias(config_pretrained, window_size=self.window)\r\n\r\n            # BeitSelfOutput (BeitAttention)\r\n            self.attention_output = nn.Linear(self.hidden_size, self.hidden_size)\r\n\r\n            # BeitIntermediate\r\n            self.intermediate = nn.Linear(self.hidden_size, self.intermediate_size)\r\n            self.intermediate_act_fn = ACT2FN['gelu']\r\n\r\n            # BeitOutput\r\n            self.output = nn.Linear(self.intermediate_size, self.hidden_size)\r\n\r\n            self.layernorm_before = nn.LayerNorm(self.hidden_size, eps=1e-12)\r\n            self.drop_path = BeitDropPath(self.dropout_rate) if self.dropout_rate > 0.0 else nn.Identity()\r\n            self.layernorm_after = nn.LayerNorm(self.hidden_size, eps=1e-12)\r\n            init_values = self.layer_scale_init_value\r\n            if init_values > 0:\r\n                self.lambda_1 = nn.Parameter(init_values * torch.ones((self.hidden_size)), requires_grad=True)\r\n                self.lambda_2 = nn.Parameter(init_values * torch.ones((self.hidden_size)), requires_grad=True)\r\n\r\n        \r\n        def transpose_for_scores(self, x):\r\n            new_x_shape = x.size()[:-1] + (self.num_attention_heads, self.attention_head_size)\r\n            x = x.view(*new_x_shape)\r\n            return x.permute(0, 2, 1, 3)\r\n\r\n            \r\n        def forward(self, hidden_states):\r\n\r\n            mixed_query_layer = self.attention_query(self.layernorm_before(hidden_states))\r\n\r\n            key_layer = self.transpose_for_scores(self.attention_key(hidden_states))\r\n            value_layer = self.transpose_for_scores(self.attention_value(hidden_states))\r\n            query_layer = self.transpose_for_scores(mixed_query_layer)\r\n\r\n            # Take the dot product between \"query\" and \"key\" to get the raw attention scores.\r\n            attention_scores = torch.matmul(query_layer, key_layer.transpose(-1, -2))\r\n            attention_scores = attention_scores / math.sqrt(self.attention_head_size)\r\n\r\n            # Add relative position bias if present.\r\n            if self.window is not None:\r\n                attention_scores = attention_scores + self.attention_rel_pos_bias()[:,1:,1:].unsqueeze(0) # cls token not included, thats why [:,1:,1:]\r\n\r\n            # Normalize the attention scores to probabilities.\r\n            attention_probs = nn.functional.softmax(attention_scores, dim=-1)\r\n\r\n            context_layer = torch.matmul(attention_probs, value_layer)\r\n\r\n            context_layer = context_layer.permute(0, 2, 1, 3).contiguous()\r\n            new_context_layer_shape = context_layer.size()[:-2] + (self.all_head_size,)\r\n            context_layer = context_layer.view(*new_context_layer_shape)\r\n\r\n            attention_output = self.attention_output(context_layer)\r\n\r\n            if self.lambda_1 is not None:\r\n                attention_output = self.lambda_1 * attention_output\r\n            \r\n            # first residual connection\r\n            hidden_states = self.drop_path(attention_output) + hidden_states\r\n\r\n            layer_output = self.layernorm_after(hidden_states)\r\n\r\n            layer_output = self.intermediate(layer_output)\r\n            layer_output = self.output(layer_output)\r\n\r\n            if self.lambda_2 is not None:\r\n                layer_output = self.lambda_2 * layer_output\r\n\r\n            # second residual connection\r\n            outputs = self.drop_path(layer_output) + hidden_states\r\n\r\n            return outputs\r\n\r\n\r\n    class CrossAttention(nn.Module):\r\n        def __init__(\r\n            self,\r\n            dim,\r\n            context_dim=None,\r\n            dim_head=64,\r\n            heads=8,\r\n            parallel_ff=False,\r\n            ff_mult=4,\r\n            norm_context=False\r\n        ):\r\n            super().__init__()\r\n            self.heads = heads\r\n            self.scale = dim_head ** -0.5\r\n            inner_dim = heads * dim_head\r\n\r\n            def default(val, d):\r\n                def exists(val):\r\n                    return val is not None\r\n                return val if exists(val) else d\r\n            \r\n            context_dim = default(context_dim, dim)\r\n\r\n            self.norm = nn.LayerNorm(dim)\r\n            self.context_norm = nn.LayerNorm(context_dim) if norm_context else nn.Identity()\r\n\r\n            self.to_q = nn.Linear(dim, inner_dim, bias=False)\r\n            self.to_kv = nn.Linear(context_dim, dim_head * 2, bias=False)\r\n            self.to_out = nn.Linear(inner_dim, dim, bias=False)\r\n\r\n            # whether to have parallel feedforward\r\n\r\n            ff_inner_dim = ff_mult * dim\r\n\r\n            self.ff = nn.Sequential(\r\n                nn.Linear(dim, ff_inner_dim * 2, bias=False),\r\n                SwiGLU(),\r\n                nn.Linear(ff_inner_dim, dim, bias=False)\r\n            ) if parallel_ff else None\r\n\r\n        def forward(self, x, context):\r\n            \"\"\"\r\n            einstein notation\r\n            b - batch\r\n            h - heads\r\n            n, i, j - sequence length (base sequence length, source, target)\r\n            d - feature dimension\r\n            \"\"\"\r\n\r\n            # pre-layernorm, for queries and context\r\n\r\n            x = self.norm(x)\r\n            context = self.context_norm(context)\r\n\r\n            # get queries\r\n\r\n            q = self.to_q(x)\r\n            q = rearrange(q, 'b n (h d) -> b h n d', h = self.heads)\r\n\r\n            # scale\r\n\r\n            q = q * self.scale\r\n\r\n            # get key / values\r\n\r\n            k, v = self.to_kv(context).chunk(2, dim=-1)\r\n\r\n            # query / key similarity\r\n\r\n            sim = einsum('b h i d, b j d -> b h i j', q, k)\r\n\r\n            # attention\r\n\r\n            sim = sim - sim.amax(dim=-1, keepdim=True)\r\n            attn = sim.softmax(dim=-1)\r\n\r\n            # aggregate\r\n\r\n            out = einsum('b h i j, b j d -> b h i d', attn, v)\r\n\r\n            # merge and combine heads\r\n\r\n            out = rearrange(out, 'b h n d -> b n (h d)')\r\n            out = self.to_out(out)\r\n\r\n            # add parallel feedforward (for multimodal layers)\r\n            if self.ff:\r\n                out = out + self.ff(x)\r\n\r\n            return out\r\n\r\n\r\n    class BeitDropPath(nn.Module):\r\n        \"\"\"Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\"\"\"\r\n\r\n        def __init__(self, drop_prob: float = None) -> None:\r\n            super().__init__()\r\n            self.drop_prob = drop_prob\r\n\r\n        def forward(self, x: torch.Tensor) -> torch.Tensor:\r\n            \"\"\"\r\n                Drop paths (Stochastic Depth) per sample (when applied in main path of residual blocks).\r\n\r\n                Comment by Ross Wightman: This is the same as the DropConnect impl I created for EfficientNet, etc networks,\r\n                however, the original name is misleading as 'Drop Connect' is a different form of dropout in a separate paper...\r\n                See discussion: https://github.com/tensorflow/tpu/issues/494#issuecomment-532968956 ... I've opted for changing the\r\n                layer and argument names to 'drop path' rather than mix DropConnect as a layer name and use 'survival rate' as the\r\n                argument.\r\n            \"\"\"\r\n\r\n            if self.drop_prob == 0.0 or not self.training:\r\n                return x\r\n            keep_prob = 1 - self.drop_prob\r\n            shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets\r\n            random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)\r\n            random_tensor.floor_()  # binarize\r\n            output = x.div(keep_prob) * random_tensor\r\n            return output\r\n\r\n\r\n\r\n    class SwiGLU(nn.Module):\r\n        def forward(self, x):\r\n            x, gate = x.chunk(2, dim=-1)\r\n            return F.silu(gate) * x\r\n\r\n\r\n    class ClassMovieClassifier(nn.Module):\r\n        def __init__(self, input_channels, output_channels, num_frames, final_batch=False) -> None:\r\n            super().__init__()\r\n\r\n            if not final_batch:\r\n                self.module_list = nn.ModuleList([\r\n                    nn.Sequential(\r\n                        nn.Conv2d(input_channels, output_channels, kernel_size=1),\r\n                        nn.ReLU()\r\n                    ) for i in range(num_frames)\r\n                ])\r\n\r\n            else:\r\n                self.module_list = nn.ModuleList([\r\n                    nn.Sequential(\r\n                        nn.Conv2d(input_channels, output_channels, kernel_size=1),\r\n                        nn.BatchNorm2d(output_channels),\r\n                        nn.ReLU()\r\n                    ) for i in range(num_frames)\r\n                ])\r\n\r\n            self.apply(self._initialize_weights)\r\n        \r\n        def _initialize_weights(self, m):\r\n            if hasattr(m, 'weight') or hasattr(m, 'bias'):\r\n                try:\r\n                    torch.nn.init.xavier_normal_(m.weight)\r\n                except ValueError:\r\n                    # Prevent ValueError(\"Fan in and fan out can not be computed for tensor with fewer than 2 dimensions\")\r\n                    m.weight.data.uniform_(-0.2, 0.2)\r\n                    # print(\"Bypassing ValueError...\")\r\n                if m.bias is not None:\r\n                    m.bias.data.zero_()\r\n\r\n        def forward(self, input):\r\n            return [module(input) for module in self.module_list]\r\n\r\n    def get_color(class_label):\r\n        if class_label == 1: return np.array([143, 225,255], dtype=np.uint8)\r\n        elif class_label == 2: return np.array([0, 0, 255], dtype=np.uint8)\r\n        elif class_label == 3: return np.array([255, 0,255], dtype=np.uint8)\r\n        return None\r\n\r\n\r\n    CUDA_DEVICE = 'cpu' # 0, 1 or 'cpu'\r\n    MODE = 'density_class'# implemented: grayscale, evac, evac_only, class_movie, density_reg, density_class, denseClass_wEvac\r\n    BATCH_SIZE = 2\r\n    ARCH = 'MyModel' # MyModel, DeepLab, BeIT, SegFormer\r\n    ADD_INFO = True\r\n\r\n    test_run = True # limit_batches -> 2 \r\n    save_model = False # create folder and save the model\r\n\r\n    # example input coming from the outside\r\n    num_origins = torch.LongTensor([4])\r\n    num_destinations = torch.LongTensor([1])\r\n    num_agents_id = torch.LongTensor([2])\r\n    site_dimensions = torch.FloatTensor([0.55, 0.3])\r\n    velocity_id = torch.LongTensor([2])\r\n\r\n    add_info = [num_origins, num_destinations, num_agents_id, site_dimensions, velocity_id]\r\n\r\n    config = {\r\n        'decoder_mode': 'fpn',\r\n        'settings': {'final_conv_batch': True, 'marriage_mode': 2, 'hidden_size': 768, 'num_hidden_ca_layers': 3, 'use_pe': False, 'attn_pooling': False},\r\n        'num_hidden_img_layers': 6\r\n    }\r\n    model = MyModel('density_class', output_channels=4, num_heads=8, additional_info=True, config=config)\r\n\r\n    model.eval()\r\n\r\n    # image = np.array(PIL.Image.open('C:\\\\Users\\\\ga78jem\\\\Downloads\\\\test_image.png')) \r\n    # image = np.array(PIL.Image.open(r\"C:\\Users\\mohab\\Documents\\TUM\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies/PlaceholderScripts/ForwardPass/tmpn98l4445.png\")) \r\n    image = np.array(PIL.Image.open(IN[2]))\r\n    image_t = image.transpose(2,0,1).astype(np.float32) / 255.\r\n    image_t = torch.tensor(image_t).unsqueeze(0)\r\n    image_t = transforms.Normalize(mean=[0.5,0.5,0.5], std=[0.5,0.5,0.5])(image_t)\r\n\r\n    # prediction_raw = model(image_t, add_info)\r\n\r\n    # load checkpoint\r\n    # ckpt = 'C:\\\\Users\\\\ga78jem\\\\Downloads\\\\model_epoch=45-step=230000.pth'\r\n    # ckpt = r\"C:\\Users\\mohab\\Documents\\TUM\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies/PlaceholderScripts/ForwardPass/model_epoch=45-step=230000.pth\"\r\n    ckpt = fr\"{IN[1]}\\model_epoch=45-step=230000.pth\"\r\n    # ckpt = \"./model_epoch=45-step=230000.pth\"\r\n    # state_dict = OrderedDict([(key.replace('model.', ''), tensor.cpu()) if key.startswith('model.') else (key, tensor) for key, tensor in torch.load(ckpt).items()])\r\n    state_dict = OrderedDict([(key.replace('model.', ''), tensor.cpu()) if key.startswith('model.') else (key, tensor) for key, tensor in torch.load(ckpt , map_location=torch.device('cpu')).items()])\r\n    module_state_dict = model.state_dict()\r\n\r\n    mkeys_missing_in_loaded = [module_key for module_key in list(module_state_dict.keys()) if module_key not in list(state_dict.keys())]\r\n    lkeys_missing_in_module = [loaded_key for loaded_key in list(state_dict.keys()) if loaded_key not in list(module_state_dict.keys())]\r\n\r\n    load_dict = OrderedDict()\r\n    for key, tensor in module_state_dict.items():\r\n        if key in state_dict.keys():\r\n            load_dict[key] = state_dict[key]\r\n        else:\r\n            load_dict[key] = tensor\r\n\r\n    model.load_state_dict(load_dict)\r\n\r\n    # evac time prediction is still missing\r\n    # FORWARD PASS & VISUALIZATION\r\n    if MODE == 'denseClass_wEvac':\r\n        dense_pred, evac_time_pred = model(image_t, add_info)\r\n        MODE = 'density_class'\r\n    else:\r\n        dense_pred = model(image_t, add_info)\r\n\r\n    predicted_frames = []\r\n\r\n    dense_pred = dense_pred.squeeze().cpu().detach().numpy()\r\n    dense_pred = np.argmax(dense_pred, axis=0)\r\n    dense_pred = dense_pred.transpose(1,2,0)\r\n    num_frames = dense_pred.shape[-1]\r\n\r\n    cell_size = 4\r\n    add_vector_template = np.zeros((cell_size**2,2), dtype=np.int32)\r\n    for x in range(cell_size):\r\n        for y in range(cell_size):\r\n            add_vector_template[cell_size*x + y] = np.array([x, y], dtype=np.int32)\r\n\r\n    for frame_id in range(num_frames):\r\n\r\n        frame_pred_np = dense_pred[:,:,frame_id]\r\n        nnz_coords = np.argwhere(frame_pred_np > 0).squeeze()\r\n        pred_counts = frame_pred_np[nnz_coords[:,0], nnz_coords[:,1]]\r\n        # scale up\r\n        nnz_coords = np.repeat(nnz_coords, cell_size**2, axis=0) * cell_size\r\n        add_vector = np.tile(add_vector_template.transpose(1,0), np.argwhere(frame_pred_np > 0).squeeze().shape[0]).transpose(1,0)\r\n        nnz_coords += add_vector\r\n        pred_counts = np.repeat(pred_counts, cell_size**2, axis=0)\r\n        pred_counts_colored = [get_color(count) for count in pred_counts]\r\n        binned_pred_img = image.copy()\r\n        if len(pred_counts_colored) > 0: binned_pred_img[nnz_coords[:,0], nnz_coords[:,1]] = pred_counts_colored\r\n\r\n        plt.imshow(binned_pred_img)\r\n        plt.close('all')\r\n\r\n        predicted_frames.append(binned_pred_img)\r\n\r\n    # last_frame = PilImage.fromarray(predicted_frames[-1])\r\n    temp_images_paths = []\r\n    for f , frame in enumerate(predicted_frames) : \r\n        frame_as_image = PilImage.fromarray(frame)\r\n        temp_inference_image_path = tempfile.mktemp(suffix=\".png\")\r\n        # frame_as_image.save(f\"C:/Users/mohab/Documents/TUM/HiWiPatrick/PedSimAutomation/DynamoDependencies/PlaceholderScripts/ForwardPass/{f}.png\")\r\n        frame_as_image.save(temp_inference_image_path)\r\n        temp_images_paths.append(temp_inference_image_path)\r\n        # last_frame.save(temp_inference_image_path)\r\n\r\n    # OUT = temp_inference_image_path\r\n    OUT = temp_images_paths",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "e01c08f46121474586ad26a1c358cb43",
      "Inputs": [
        {
          "Id": "178c784dab4e4425a83ddc681cdc71cc",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41ba99cba4e64f519e08c9c1e860ea69",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "901128fb59ea4db998c544516c3b4a8d",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5349b6b40d504375afc9a0c833d17dab",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Directory, CoreNodeModels",
      "HintPath": "C:\\Users\\mohab\\Documents\\TUM\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies\\PlaceholderScripts\\forwardPass",
      "InputValue": "C:\\Users\\mohab\\Documents\\TUM\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies\\PlaceholderScripts\\forwardPass",
      "NodeType": "ExtensionNode",
      "Id": "721ea26c9fba420f8c990a8c967292cc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e1c74af0f224c04b84ab0f0b6dfdf62",
          "Name": "",
          "Description": "Directory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a directory on the system to get its path"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.Directory, CoreNodeModels",
      "HintPath": "C:\\Users\\mohab\\Documents\\TUM\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies\\PlaceholderScripts\\forwardPass",
      "InputValue": "C:\\Users\\mohab\\Documents\\TUM\\HiWiPatrick\\PedSimAutomation\\DynamoDependencies\\PlaceholderScripts\\forwardPass",
      "NodeType": "ExtensionNode",
      "Id": "5c93081669324210be810a4e4a7ec04e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ad00d2e87abe43e0aa26b638d356cc87",
          "Name": "",
          "Description": "Directory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows you to select a directory on the system to get its path"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "from PIL import Image\r\n\r\n\r\nif IN[0] : \r\n    paths = IN[0]\r\n    save_path = IN[1]\r\n    frames = [\r\n            Image.open(path).convert('RGB') for path in paths\r\n    ]\r\n\r\n    frames[0].save(f'{save_path}/prediction.gif', format='GIF', append_images=frames[1:], save_all=True, duration=100 * len(frames), loop=0)\r\n\r\n    OUT = \"DONE\"",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "c3d50dcd6f8e4499944ec38f97e14415",
      "Inputs": [
        {
          "Id": "54b6225dd99c477f9947071d319c648f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "502835758b364069ad45466f2cbc890a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e38126397ce64da8bccfdef07c1e16d0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementTypes, DSRevitNodesUI",
      "SelectedIndex": 350,
      "SelectedString": "ViewPlan",
      "NodeType": "ExtensionNode",
      "Id": "5cf7b4a5da5a4f08be1428ffddc92ea7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "564d7612b1ed4c90ba99f49243b272f5",
          "Name": "Types",
          "Description": "The selected Types",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All element subtypes."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "5c1fb66a83cb4d55a51126b23a19e6e3",
      "Inputs": [
        {
          "Id": "e2d87c0b05a041bf9bf07403fc7aed14",
          "Name": "element type",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "87e6ad3927b24a17b0cd7df7c50ecb56",
          "Name": "elements",
          "Description": "All elements in the active document of a given type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All elements in the active document of a given type."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "OUT=IN[0];",
      "Id": "958fc39c09054177afcc4d52bea0d278",
      "Inputs": [
        {
          "Id": "45fa907b28f946ae85ae6a6d9f156f16",
          "Name": "IN",
          "Description": "IN",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "41486586813d46989a9303484f1828db",
          "Name": "",
          "Description": "OUT",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Id",
      "Id": "7220f621ce7e434793244ca8152628d2",
      "Inputs": [
        {
          "Id": "b717d725fd174d5285bf360cd3af90da",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5e9c833514ac40b4b8701ff61b6bf2a4",
          "Name": "int",
          "Description": "int",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element Id for this element\n\nElement.Id: int"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.8,
      "Id": "cd2e5fcb5de24038afc425a3cfefc453",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "46145a704d184e48ae7f13d166bfbc4d",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 4.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "InputValue": 1.0,
      "Id": "5b350cebac314cb9a325306ec845d417",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "953e2fa38e81426b9b4cfa25bd9720e5",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nis_geometry = [False for _ in range(4)]\r\n\r\nif not IN[1] : \r\n    is_geometry[int(IN[0]) - 1] = True\r\n    \r\nOUT = is_geometry\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "07c3d956cc9249a49cb3b8fc87db942b",
      "Inputs": [
        {
          "Id": "32b4fbba0e5a46e38ed494c056314cda",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d76fcae3ff5a4095b5933d28d14b924d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "527add7e5a884f759a7a06f645ccc0cb",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nmodel_selector_list = UnwrapElement(IN[4])\r\n\r\ngeometry_index = model_selector_list.index(True)\r\n\r\n\r\nOUT = IN[geometry_index]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "71d3b8b1743b4defaedca996335ca3d8",
      "Inputs": [
        {
          "Id": "eb6d000b1f00435e874b4170fab9a45f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4a57837ccc2442099e6f52922051b995",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0f0fa6ebc52949119895ba7dd5a81150",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9f36dd8fe2714c6aa6567bc6d84de739",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "577dd3a7b7ee4a158562988ab1820fd1",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0162b24614ee49fe9a23a04ae7f3f2ae",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries -> 5,6,7 = door obstacle room widths\r\n###############################################################\r\nimport os\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\n\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.Revit.DB import *\r\n#from Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.DB import StairsEditScope\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import StairsRun\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n###############################################################\r\n# Customize functions \r\n###############################################################\r\n\"\"\"\r\nConverts default unit in Dynamo into meter...\r\n\"\"\"\r\ndef convert_meter_to_unit(pre_value):\r\n    tempo_list = []\r\n    tempo_value = 0\r\n    if isinstance(pre_value, list):\r\n        len_list = len(pre_value)\r\n        for ii in range(len_list):\r\n            tempo_list.append (float(UnitUtils.ConvertToInternalUnits(pre_value[ii], UnitTypeId.Meters)))\r\n        pre_value = tempo_list\r\n    else:\r\n        tempo_value = float(UnitUtils.ConvertToInternalUnits(pre_value, UnitTypeId.Meters))\r\n        pre_value = tempo_value\r\n    return pre_value\r\n\r\n\r\ndef convert_to_meter(internal_value):\r\n\tif isinstance(internal_value, list):\r\n\t\treturn [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in internal_value]\r\n\treturn float(UnitUtils.ConvertFromInternalUnits(internal_value, UnitTypeId.Meters))\r\n\r\n\"\"\"\r\nProvide perimeter lines from three dimensions...\r\n\"\"\"\r\ndef find_perimeter_lines(x,y,z):\r\n    line_list = []\r\n    xx = x\r\n    yy = y\r\n    zz = z \r\n    # print \"find_perimeter_lines x: \" + str(x)\r\n    # print \"find_perimeter_lines y: \" + str(y)\r\n    # print \"find_perimeter_lines z: \" + str(z)\r\n\t\r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n\r\n    line_list.append(line_1)\r\n    line_list.append(line_2)\r\n    line_list.append(line_3)\r\n    line_list.append(line_4)\r\n    \r\n    return line_list\r\n\r\n\"\"\"\r\nProvide the geometry of slab by level...\r\n\"\"\"\r\ndef slab_geometry_by_level(x,y,level,delta_z):\r\n    zz = level.Elevation + delta_z\r\n    xx = x\r\n    yy = y \r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n    \r\n    slab_geometry = CurveArray()\r\n    slab_geometry.Append(line_1)\r\n    slab_geometry.Append(line_2)\r\n    slab_geometry.Append(line_3)\r\n    slab_geometry.Append(line_4)\r\n    return slab_geometry\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# uiapp = DocumentManager.Instance.CurrentUIApplication \r\n# app = uiapp.Application\r\n# uidoc = uiapp.ActiveUIDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ndefault_exterior_wall_type = UnwrapElement(IN[0])                   # Default exterior wall type\r\ndefault_floor_type = UnwrapElement(IN[1])                           # Default Floor type\r\ndefault_interior_wall_type = UnwrapElement(IN[2])\t\t\t\t# Default interior wall type\r\n### INPUT PARAMETERS ###\r\nparameter_list = IN[3][1]\r\nsite_x = parameter_list[0]                                # the overall length of the site\r\nsite_y = parameter_list[1]                                # the overall widthness of the site\r\nCORR_WIDTH = parameter_list[2]\r\nMIN_ROOM_LENGTH = parameter_list[3]\r\nINCLUDE_BOTTLENECK = parameter_list[4]\r\ncreate_mode = IN[7][3]\r\nDOOR_WIDTH_H = convert_meter_to_unit(float(IN[4])/2.)\r\nOBSTACLE_WIDTH  = float(IN[5])\r\nROOM_WIDTH = convert_meter_to_unit(float(IN[6]))\r\n\r\nnumber_story = 1                                          # the total amount of the stories;\r\nstory_z = [0]\r\nsite_z = 4                                              # the overall height of the site\r\nref_level_z = 0                                         # the z-position of the reference level (default level = level 0, created in the prepared .rvt)\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n###############################################################\r\n# Define the output\r\n###############################################################\r\n\r\n# Create room dict\r\nroom_dict = {}\r\n\r\nif create_mode:\r\n    geo_site = []                                                       # archive all the input data\r\n    ref_level = []                                                      # the reference level\r\n    bbox_site = []                                                      # bounding box of the site\r\n\r\n    # sys.path.append('C:\\Users\\ga78jem\\Miniconda3\\envs\\trajectron++\\Lib\\site-packages')\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n\r\n    # print \"site x before conversion:\" + str(site_x)\r\n    # adjust the sizes to account for wall thickness\r\n    site_x -= 0.3\r\n    site_y -= 0.3\r\n    site_x = convert_meter_to_unit(site_x)\r\n    site_y = convert_meter_to_unit(site_y)\r\n    site_z = convert_meter_to_unit(site_z)\r\n    ref_level_z = convert_meter_to_unit(ref_level_z)\r\n    CORR_WIDTH = convert_meter_to_unit(CORR_WIDTH)\r\n    MIN_ROOM_LENGTH = convert_meter_to_unit(MIN_ROOM_LENGTH)\r\n    \r\n    # print \"site x after conversion:\" + str(site_x)\r\n\r\n    ###############################################################\r\n    # Delete all levels apart from the reference level (when there are multiple levels)\r\n    ###############################################################\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    def clear_model(bool_value):\r\n        if bool_value:\r\n            del_grid = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType().ToElements()\r\n            del_door = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n            del_floor = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n            del_wall = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n            del_roof = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n            del_all = [del_grid, del_door, del_floor, del_wall, del_roof]\r\n            for element_type in del_all:\r\n                for element in element_type:\r\n                    doc.Delete(element.Id)\r\n\r\n    clear_model(True)\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 01_Site\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level_z:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != ref_level_z:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, ref_level_z)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    #--------------------------------------------------------------\r\n    #------------------ OK NOW YOU CAN CODE -----------------------\r\n    #--------------------------------------------------------------\r\n\r\n    # Create Bounding Box\r\n    bb = BoundingBoxXYZ()\r\n    bb.Min = XYZ(0, 0, 0)\r\n    bb.Max = XYZ(0, 0, site_z)\r\n    bbox_site.append(bb.ToProtoType())                  # the bounding box of the entire site\r\n    # Close and save the recording file\r\n    # geo_site.append(site_x)\r\n    # geo_site.append(site_y)\r\n    # geo_site.append(site_z)\r\n\r\n    ###############################################################\r\n    # END OF SCRIPT 1\r\n    # START OF SCRIPT 2\r\n    ###############################################################\r\n\r\n    archive_data = []                                                   # archive all the input data\r\n    bbox_story = []\r\n    exterior_wall_list = []\r\n    floor_list = []\r\n    roof_list = []\r\n    entrance_door_list = []\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n    story_z = convert_meter_to_unit(story_z)\r\n\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 02_Story\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level.Elevation:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != 0:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, 0)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    ###############################################################\r\n    # Check the consistence with the bouning box of the side \r\n    ###############################################################\r\n    # Check the z-position of the highest story against the site box\r\n\r\n    check_site_story = True if max(story_z) < site_z else False\r\n    #print \"The stories are consistent with the overal site:\" + str(check_site_story)\r\n\r\n    # Create new story levels\r\n    for ii in range(number_story):\r\n        if ref_level.Elevation == story_z[ii]:\r\n            continue\r\n        new_level = Autodesk.Revit.DB.Level.Create(doc, story_z[ii])\r\n        new_level.Name = \"Story Level \" + str(ii)\r\n\r\n    # Create the roof level\r\n    roof_level = Autodesk.Revit.DB.Level.Create(doc, site_z)\r\n    roof_level.Name = \"Roof Level\"\r\n\r\n    # all levels\r\n    allLevels = FilteredElementCollector(doc).OfClass(Level).ToElements()\r\n\r\n    # Create Bounding Box for each story level\r\n    for ii in range(number_story):\r\n        level_bbox_end_z = story_z[ii+1] if ii < (number_story-1) else site_z\r\n        #print \"Story\"+str(ii)\r\n        #print str(level_bbox_end_z)\r\n        bb = BoundingBoxXYZ()\r\n        bb.Min = XYZ(0, 0, story_z[ii])\r\n        bb.Max = XYZ(site_x, site_y, level_bbox_end_z)\r\n        bbox_story.append(bb.ToProtoType())\r\n\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n    # Create floorplan complexity\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n\r\n    LENGTH = site_x\r\n    WIDTH = site_y\r\n    print('x_length: ' + str(convert_to_meter(LENGTH)))\r\n    print('y_width: ' + str(convert_to_meter(WIDTH)))\r\n    z_level = ref_level.Elevation\r\n    ceiling = allLevels[0].Elevation\r\n\r\n    DOOR_HEIGHT = convert_meter_to_unit(2.2)\r\n    DOOR_THICKNESS_H = convert_meter_to_unit(0.25)\r\n\r\n    obstacle_counter = 0\r\n\r\n    # Create the exterior walls\r\n    perimeter_lines = find_perimeter_lines(LENGTH, WIDTH, z_level)\r\n    for ww in range(4):\r\n        wall = Wall.Create(doc, perimeter_lines[ww], default_exterior_wall_type.Id, ref_level.Id, site_z, 0, False, True)\r\n        exterior_wall_list.append(wall)\r\n\r\n    # Create floor for each story level\r\n    for ii in range(number_story):\r\n        ll = allLevels[ii]\r\n        floor_geometry = slab_geometry_by_level(LENGTH, WIDTH, ll, 0.0)\r\n        floor = doc.Create.NewFloor(floor_geometry, default_floor_type, ll, True)\r\n        floor_list.append(floor)\r\n\r\n    # Create corridor lines\r\n\r\n    x_corridor = ROOM_WIDTH + CORR_WIDTH/2.\r\n    y_corridor = WIDTH - ROOM_WIDTH - CORR_WIDTH/2.\r\n\r\n    y_main_corridor = 0.5*WIDTH\r\n    x_main_corridor_start = CORR_WIDTH\r\n    x_main_corridor_end = LENGTH-CORR_WIDTH\r\n\r\n    p2_l = XYZ(x_corridor-CORR_WIDTH/2., CORR_WIDTH, ceiling)\r\n    p4_l = XYZ(LENGTH-CORR_WIDTH, y_corridor+CORR_WIDTH/2., ceiling)\r\n    p2_r = XYZ(x_corridor+CORR_WIDTH/2., CORR_WIDTH, ceiling)\r\n    p4_r = XYZ(LENGTH-CORR_WIDTH, y_corridor-CORR_WIDTH/2., ceiling)\r\n\r\n    corridor_lines_left = [\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor-CORR_WIDTH, 0, ceiling), XYZ(x_corridor-CORR_WIDTH, CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor-CORR_WIDTH, CORR_WIDTH, ceiling), p2_l),\r\n        Autodesk.Revit.DB.Line.CreateBound(p2_l, XYZ(x_corridor-CORR_WIDTH/2., y_corridor+CORR_WIDTH/2., ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor-CORR_WIDTH/2., y_corridor+CORR_WIDTH/2., ceiling), p4_l),\r\n        Autodesk.Revit.DB.Line.CreateBound(p4_l, XYZ(LENGTH-CORR_WIDTH, y_corridor+CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(LENGTH-CORR_WIDTH, y_corridor+CORR_WIDTH, ceiling), XYZ(LENGTH, y_corridor+CORR_WIDTH, ceiling)),\r\n    ]\r\n\r\n    corridor_lines_right = [\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor+CORR_WIDTH, 0, ceiling), XYZ(x_corridor+CORR_WIDTH, CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor+CORR_WIDTH, CORR_WIDTH, ceiling), p2_r),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor+CORR_WIDTH/2., CORR_WIDTH, ceiling), XYZ(x_corridor+CORR_WIDTH/2., y_corridor-CORR_WIDTH/2., ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor+CORR_WIDTH/2., y_corridor-CORR_WIDTH/2., ceiling), p4_r),\r\n        Autodesk.Revit.DB.Line.CreateBound(p4_r, XYZ(LENGTH-CORR_WIDTH, y_corridor-CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(LENGTH-CORR_WIDTH, y_corridor-CORR_WIDTH, ceiling), XYZ(LENGTH, y_corridor-CORR_WIDTH, ceiling)),\r\n    ]\r\n\r\n    # assign room\r\n    room_dict.update({\r\n        'CROWDIT_DESTINATION_'+str(0): [\r\n                (convert_to_meter(x_corridor-CORR_WIDTH)+0.5, convert_to_meter(0)+0.5),\r\n                (convert_to_meter(x_corridor+CORR_WIDTH)-0.5, convert_to_meter(CORR_WIDTH)-0.5)\r\n            ]\r\n        }\r\n    )\r\n\r\n    room_dict.update({\r\n        'CROWDIT_DESTINATION_'+str(1): [\r\n                (convert_to_meter(LENGTH-CORR_WIDTH)+0.5, convert_to_meter(y_corridor-CORR_WIDTH)+0.5),\r\n                (convert_to_meter(LENGTH)-0.5, convert_to_meter(y_corridor+CORR_WIDTH)-0.5)\r\n            ]\r\n        }\r\n    )\r\n\r\n    corridor_walls_left = [Wall.Create(doc, wall_l, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n        for wall_l in corridor_lines_left]\r\n    corridor_walls_right = [Wall.Create(doc, wall_r, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n        for wall_r in corridor_lines_right]\r\n\r\n    partition_openings = []\r\n\r\n    if INCLUDE_BOTTLENECK:\r\n        bottleneck_lines = [\r\n            Autodesk.Revit.DB.Line.CreateBound(p2_l, p2_r),\r\n            Autodesk.Revit.DB.Line.CreateBound(p4_l, p4_r)\r\n        ]\r\n        bottleneck_walls = [Wall.Create(doc, b_wall, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n            for b_wall in bottleneck_lines]\r\n\r\n        # some doors\r\n        x_door_1 = (p2_l.X + p2_r.X) / 2.\r\n        y_door_1 = (p2_l.Y + p2_r.Y) / 2.\r\n        x_door_2 = (p4_l.X + p4_r.X) / 2.\r\n        y_door_2 = (p4_l.Y + p4_r.Y) / 2.\r\n        \r\n        start_point_1 = XYZ(x_door_1-DOOR_WIDTH_H, y_door_1-DOOR_THICKNESS_H, z_level)\r\n        end_point_1 = XYZ(x_door_1+DOOR_WIDTH_H, y_door_1+DOOR_THICKNESS_H, z_level+DOOR_HEIGHT)\r\n        opening_1 = doc.Create.NewOpening(bottleneck_walls[0], start_point_1, end_point_1)\r\n\r\n        start_point_2 = XYZ(x_door_2-DOOR_THICKNESS_H, y_door_2-DOOR_WIDTH_H, z_level)\r\n        end_point_2 = XYZ(x_door_2+DOOR_THICKNESS_H, y_door_2+DOOR_WIDTH_H, z_level+DOOR_HEIGHT)\r\n        opening_2 = doc.Create.NewOpening(bottleneck_walls[1], start_point_2, end_point_2)\r\n\r\n    outter_office_lines = [\r\n        Autodesk.Revit.DB.Line.CreateBound(\r\n            XYZ(x_corridor+ROOM_WIDTH+CORR_WIDTH/2, 0, ceiling), \r\n            XYZ(x_corridor+ROOM_WIDTH+CORR_WIDTH/2, y_corridor - ROOM_WIDTH - CORR_WIDTH/2., ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(\r\n            XYZ(x_corridor+ROOM_WIDTH+CORR_WIDTH/2, y_corridor - ROOM_WIDTH - CORR_WIDTH/2., ceiling),\r\n            XYZ(LENGTH, y_corridor - ROOM_WIDTH - CORR_WIDTH/2., ceiling))\r\n    ]\r\n    outter_office_walls = [Wall.Create(doc, o_wall, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n            for o_wall in outter_office_lines]\r\n\r\n    edge_room_x = ROOM_WIDTH # + CORR_WIDTH\r\n    # edge room door\r\n    \"\"\" start_point_edge = XYZ((edge_room_x+ROOM_WIDTH)/2.-DOOR_WIDTH_H, y_corridor+CORR_WIDTH/2.-DOOR_THICKNESS_H, z_level)\r\n    end_point_edge = XYZ((edge_room_x+ROOM_WIDTH)/2.+DOOR_WIDTH_H, y_corridor+CORR_WIDTH/2.+DOOR_THICKNESS_H, z_level+DOOR_HEIGHT)\r\n    partition_openings.append(doc.Create.NewOpening(corridor_walls_left[3], start_point_edge, end_point_edge))\r\n\r\n    # assign room\r\n    room_dict.update({\r\n        'CROWDIT_ORIGIN_'+str(0): [\r\n                (convert_to_meter(0)+0.5, convert_to_meter(y_corridor+CORR_WIDTH/2.)+0.5),\r\n                (convert_to_meter(edge_room_x)-0.5, convert_to_meter(WIDTH)-0.5)\r\n            ]\r\n        }\r\n    ) \"\"\"\r\n\r\n    # side rooms along y\r\n    y_start_rooms = 2*CORR_WIDTH\r\n    y_end_rooms_long = y_corridor + CORR_WIDTH/2.\r\n    y_end_rooms_short = y_corridor - CORR_WIDTH/2.\r\n\r\n    NUM_ROOMS_LONG_Y = int((y_end_rooms_long-y_start_rooms) / MIN_ROOM_LENGTH)\r\n    NUM_ROOMS_SHORT_Y = int((y_end_rooms_short-y_start_rooms) / MIN_ROOM_LENGTH)\r\n    fractions_partitions = [1./NUM_ROOMS_LONG_Y*i for i in range(NUM_ROOMS_LONG_Y+1)] if NUM_ROOMS_LONG_Y > 0 else []\r\n    y_pos_partitions_long = [y_start_rooms + fr * (y_end_rooms_long - y_start_rooms) for fr in fractions_partitions] if len(fractions_partitions) > 0 else [y_start_rooms, y_end_rooms_long]\r\n    fractions_partitions = [1./NUM_ROOMS_SHORT_Y*i for i in range(NUM_ROOMS_SHORT_Y+1)] if NUM_ROOMS_SHORT_Y > 0 else []\r\n    y_pos_partitions_short = [y_start_rooms + fr * (y_end_rooms_short - y_start_rooms) for fr in fractions_partitions] if len(fractions_partitions) > 0 else [y_start_rooms, y_end_rooms_short]\r\n\r\n    partition_lines = []\r\n\r\n    for idy, y_pos_part in enumerate(y_pos_partitions_long):\r\n\r\n        partition_lines.append(\r\n            Autodesk.Revit.DB.Line.CreateBound(XYZ(0, y_pos_part, ceiling), XYZ(x_corridor-CORR_WIDTH/2., y_pos_part, ceiling))\r\n        )\r\n        if idy < len(y_pos_partitions_long)-1:\r\n            # assign room\r\n            room_dict.update({\r\n                'CROWDIT_ORIGIN_'+str(idy): [\r\n                        (convert_to_meter(0)+0.5, convert_to_meter(y_pos_part)+0.5),\r\n                        (convert_to_meter(x_corridor-CORR_WIDTH/2.)-0.5, convert_to_meter(y_pos_partitions_long[idy+1])-0.5)\r\n                    ]\r\n                }\r\n            )\r\n            # a door\r\n            start_point_part = XYZ(x_corridor-CORR_WIDTH/2.-DOOR_THICKNESS_H, (y_pos_partitions_long[idy+1]+y_pos_part)/2.-DOOR_WIDTH_H, z_level)\r\n            end_point_part = XYZ(x_corridor-CORR_WIDTH/2.+DOOR_THICKNESS_H, (y_pos_partitions_long[idy+1]+y_pos_part)/2.+DOOR_WIDTH_H, z_level+DOOR_HEIGHT)\r\n            partition_openings.append(doc.Create.NewOpening(corridor_walls_left[2], start_point_part, end_point_part))\r\n\r\n            # obstacles\r\n            if idy % 2 == 0:\r\n                obstacle_length = 2.\r\n                x_obst_min, x_obst_max = convert_to_meter(x_corridor-CORR_WIDTH/2.)+0.1, convert_to_meter(x_corridor-CORR_WIDTH/2.)+0.1+OBSTACLE_WIDTH\r\n                y_obst_min, y_obst_max = convert_to_meter(y_pos_part)-obstacle_length/2., convert_to_meter(y_pos_part)+obstacle_length/2.\r\n\r\n                room_dict.update({\r\n                    'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_2_1_': [\r\n                            (x_obst_min, y_obst_min),\r\n                            (x_obst_max, y_obst_max)\r\n                        ]\r\n                    }\r\n                )\r\n                obstacle_counter += 1\r\n\r\n    for idy, y_pos_part in enumerate(y_pos_partitions_short[:-1]):\r\n\r\n        partition_lines.append(\r\n            Autodesk.Revit.DB.Line.CreateBound(XYZ(x_corridor+CORR_WIDTH/2., y_pos_part, ceiling), XYZ(x_corridor+CORR_WIDTH/2.+ROOM_WIDTH, y_pos_part, ceiling))\r\n        )\r\n        if idy < len(y_pos_partitions_short)-1:\r\n            # assign room\r\n            room_dict.update({\r\n                'CROWDIT_ORIGIN_'+str(idy+len(y_pos_partitions_long)-1): [\r\n                        (convert_to_meter(x_corridor+CORR_WIDTH/2.)+0.5, convert_to_meter(y_pos_part)+0.5),\r\n                        (convert_to_meter(x_corridor+CORR_WIDTH/2.+ROOM_WIDTH)-0.5, convert_to_meter(y_pos_partitions_short[idy+1])-0.5)\r\n                    ]\r\n                }\r\n            )\r\n            # a door\r\n            start_point_part = XYZ(x_corridor+CORR_WIDTH/2.-DOOR_THICKNESS_H, (y_pos_partitions_short[idy+1]+y_pos_part)/2.-DOOR_WIDTH_H, z_level)\r\n            end_point_part = XYZ(x_corridor+CORR_WIDTH/2.+DOOR_THICKNESS_H, (y_pos_partitions_short[idy+1]+y_pos_part)/2.+DOOR_WIDTH_H, z_level+DOOR_HEIGHT)\r\n            partition_openings.append(doc.Create.NewOpening(corridor_walls_right[2], start_point_part, end_point_part))\r\n\r\n            # obstacles\r\n            if idy % 2 != 0:\r\n                obstacle_length = 2.\r\n                x_obst_min, x_obst_max = convert_to_meter(x_corridor+CORR_WIDTH/2.)-0.1-OBSTACLE_WIDTH, convert_to_meter(x_corridor+CORR_WIDTH/2.)-0.1\r\n                y_obst_min, y_obst_max = convert_to_meter(y_pos_part)-obstacle_length/2., convert_to_meter(y_pos_part)+obstacle_length/2.\r\n\r\n                room_dict.update({\r\n                    'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_2_1_': [\r\n                            (x_obst_min, y_obst_min),\r\n                            (x_obst_max, y_obst_max)\r\n                        ]\r\n                    }\r\n                )\r\n                obstacle_counter += 1\r\n\r\n    # side rooms along x\r\n    x_end_rooms = LENGTH - 2*CORR_WIDTH\r\n    x_start_rooms_long = edge_room_x\r\n    x_start_rooms_short = x_corridor+CORR_WIDTH/2.+ROOM_WIDTH\r\n\r\n    NUM_ROOMS_LONG_X = int((x_end_rooms-x_start_rooms_long) / MIN_ROOM_LENGTH)\r\n    NUM_ROOMS_SHORT_X = int((x_end_rooms-x_start_rooms_short) / MIN_ROOM_LENGTH)\r\n\r\n    fractions_partitions = [1./NUM_ROOMS_LONG_X*i for i in range(NUM_ROOMS_LONG_X+1)] if NUM_ROOMS_LONG_X > 0 else []\r\n    x_pos_partitions_long = [x_start_rooms_long + fr * (x_end_rooms - x_start_rooms_long) for fr in fractions_partitions] if len(fractions_partitions) > 0 else [x_start_rooms_long, x_end_rooms]\r\n    fractions_partitions = [1./NUM_ROOMS_SHORT_X*i for i in range(NUM_ROOMS_SHORT_X+1)] if NUM_ROOMS_SHORT_X > 0 else []\r\n    x_pos_partitions_short = [x_start_rooms_short + fr * (x_end_rooms - x_start_rooms_short) for fr in fractions_partitions] if len(fractions_partitions) > 0 else [x_start_rooms_short, x_end_rooms]\r\n\r\n    for idx, x_pos_part in enumerate(x_pos_partitions_long):\r\n\r\n        if idx > 0:\r\n            # Do not create a wall at x = edge_room_x\r\n            partition_lines.append(\r\n                Autodesk.Revit.DB.Line.CreateBound(XYZ(x_pos_part, y_corridor+CORR_WIDTH/2., ceiling), XYZ(x_pos_part, WIDTH, ceiling))\r\n            )\r\n        if idx < len(x_pos_partitions_long)-1:\r\n            # assign room\r\n            room_dict.update({\r\n                'CROWDIT_ORIGIN_'+str(idx+len(y_pos_partitions_short)-1+len(y_pos_partitions_long)-1): [\r\n                        (convert_to_meter(x_pos_part)+0.5, convert_to_meter(y_corridor+CORR_WIDTH/2.)+0.5),\r\n                        (convert_to_meter(x_pos_partitions_long[idx+1])-0.5, convert_to_meter(WIDTH)-0.5)\r\n                    ]\r\n                }\r\n            )\r\n            # a door\r\n            start_point_part = XYZ((x_pos_partitions_long[idx+1]+x_pos_part)/2.-DOOR_WIDTH_H, y_corridor+CORR_WIDTH/2.-DOOR_THICKNESS_H, z_level)\r\n            end_point_part = XYZ((x_pos_partitions_long[idx+1]+x_pos_part)/2.+DOOR_WIDTH_H, y_corridor+CORR_WIDTH/2.+DOOR_THICKNESS_H, z_level+DOOR_HEIGHT)\r\n            partition_openings.append(doc.Create.NewOpening(corridor_walls_left[3], start_point_part, end_point_part))\r\n\r\n    \r\n    for idx, x_pos_part in enumerate(x_pos_partitions_short):\r\n\r\n        partition_lines.append(\r\n            Autodesk.Revit.DB.Line.CreateBound(XYZ(x_pos_part, y_corridor-CORR_WIDTH/2.-ROOM_WIDTH, ceiling), XYZ(x_pos_part, y_corridor-CORR_WIDTH/2., ceiling))\r\n        )\r\n        if idx < len(x_pos_partitions_short)-1:\r\n            # assign room\r\n            room_dict.update({\r\n                'CROWDIT_ORIGIN_'+str(idx+len(x_pos_partitions_long)-1+len(y_pos_partitions_short)-1+len(y_pos_partitions_long)-1): [\r\n                        (convert_to_meter(x_pos_part)+0.5, convert_to_meter(y_corridor-CORR_WIDTH/2.-ROOM_WIDTH)+0.5),\r\n                        (convert_to_meter(x_pos_partitions_short[idx+1])-0.5, convert_to_meter(y_corridor-CORR_WIDTH/2.)-0.5)\r\n                    ]\r\n                }\r\n            )\r\n            # a door\r\n            start_point_part = XYZ((x_pos_partitions_short[idx+1]+x_pos_part)/2.-DOOR_WIDTH_H, y_corridor-CORR_WIDTH/2.-DOOR_THICKNESS_H, z_level)\r\n            end_point_part = XYZ((x_pos_partitions_short[idx+1]+x_pos_part)/2.+DOOR_WIDTH_H, y_corridor-CORR_WIDTH/2.+DOOR_THICKNESS_H, z_level+DOOR_HEIGHT)\r\n            partition_openings.append(doc.Create.NewOpening(corridor_walls_right[3], start_point_part, end_point_part))\r\n\r\n    # obstacles\r\n    # iterate through partition walls in reverse order to generate obstacles\r\n    for idx, x_pos_part in enumerate(x_pos_partitions_long[::-1]):\r\n        if idx % 2 == 0 and idx < len(x_pos_partitions_long)-1:\r\n            obstacle_length = 2.\r\n            x_obst_min, x_obst_max = convert_to_meter(x_pos_part)-obstacle_length/2., convert_to_meter(x_pos_part)+obstacle_length/2.\r\n            y_obst_min, y_obst_max = convert_to_meter(y_corridor+CORR_WIDTH/2.)-0.1-OBSTACLE_WIDTH, convert_to_meter(y_corridor+CORR_WIDTH/2.)-0.1\r\n\r\n            room_dict.update({\r\n                'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_2_1_': [\r\n                        (x_obst_min, y_obst_min),\r\n                        (x_obst_max, y_obst_max)\r\n                    ]\r\n                }\r\n            )\r\n            obstacle_counter += 1\r\n\r\n    for idx, x_pos_part in enumerate(x_pos_partitions_short[::-1]):\r\n        if idx % 2 != 0:\r\n            obstacle_length = 2.\r\n            x_obst_min, x_obst_max = convert_to_meter(x_pos_part)-obstacle_length/2., convert_to_meter(x_pos_part)+obstacle_length/2.\r\n            y_obst_min, y_obst_max = convert_to_meter(y_corridor-CORR_WIDTH/2.)+0.1, convert_to_meter(y_corridor-CORR_WIDTH/2.)+0.1+OBSTACLE_WIDTH\r\n\r\n            room_dict.update({\r\n                'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_2_1_': [\r\n                        (x_obst_min, y_obst_min),\r\n                        (x_obst_max, y_obst_max)\r\n                    ]\r\n                }\r\n            )\r\n            obstacle_counter += 1\r\n\r\n\r\n    # check if as many origin areas as room doors \r\n    assert len(partition_openings) == len([key for key in room_dict if key.startswith('CROWDIT_ORIGIN')])\r\n\r\n    partition_walls = [Wall.Create(doc, p_wall, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n            for p_wall in partition_lines]\r\n    \r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = room_dict\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "c83d525564ba435b9ebed82975613598",
      "Inputs": [
        {
          "Id": "4b873e29bffa4f1b8aa8863b559b6422",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "76a74d5c9bdd494c9459f9edac4081d8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ba64f24ac26649919002721973c09e92",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4e6d4f62cbcd4195a6f940cec7f92f2c",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4cddcfb59735429d9e5fe5c9f9241289",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7f8ed784785d47fb88743525cca4eef6",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fbacd9ecc2334498922627d809c339fd",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1af87cd028154478949e50c34951429b",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6fec0bed45ba48d0b089a4b31ff034c4",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries Cross 5,6 = door obstacle widths\r\n###############################################################\r\nimport os\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\n\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.Revit.DB import *\r\n#from Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.DB import StairsEditScope\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import StairsRun\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n###############################################################\r\n# Customize functions \r\n###############################################################\r\n\"\"\"\r\nConverts default unit in Dynamo into meter...\r\n\"\"\"\r\ndef convert_meter_to_unit(pre_value):\r\n    tempo_list = []\r\n    tempo_value = 0\r\n    if isinstance(pre_value, list):\r\n        len_list = len(pre_value)\r\n        for ii in range(len_list):\r\n            tempo_list.append (float(UnitUtils.ConvertToInternalUnits(pre_value[ii], UnitTypeId.Meters)))\r\n        pre_value = tempo_list\r\n    else:\r\n        tempo_value = float(UnitUtils.ConvertToInternalUnits(pre_value, UnitTypeId.Meters))\r\n        pre_value = tempo_value\r\n    return pre_value\r\n\r\n\r\ndef convert_to_meter(internal_value):\r\n\tif isinstance(internal_value, list):\r\n\t\treturn [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in internal_value]\r\n\treturn float(UnitUtils.ConvertFromInternalUnits(internal_value, UnitTypeId.Meters))\r\n\r\n\"\"\"\r\nProvide perimeter lines from three dimensions...\r\n\"\"\"\r\ndef find_perimeter_lines(x,y,z):\r\n    line_list = []\r\n    xx = x\r\n    yy = y\r\n    zz = z \r\n    # print \"find_perimeter_lines x: \" + str(x)\r\n    # print \"find_perimeter_lines y: \" + str(y)\r\n    # print \"find_perimeter_lines z: \" + str(z)\r\n\t\r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n\r\n    line_list.append(line_1)\r\n    line_list.append(line_2)\r\n    line_list.append(line_3)\r\n    line_list.append(line_4)\r\n    \r\n    return line_list\r\n\r\n\"\"\"\r\nProvide the geometry of slab by level...\r\n\"\"\"\r\ndef slab_geometry_by_level(x,y,level,delta_z):\r\n    zz = level.Elevation + delta_z\r\n    xx = x\r\n    yy = y \r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n    \r\n    slab_geometry = CurveArray()\r\n    slab_geometry.Append(line_1)\r\n    slab_geometry.Append(line_2)\r\n    slab_geometry.Append(line_3)\r\n    slab_geometry.Append(line_4)\r\n    return slab_geometry\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# uiapp = DocumentManager.Instance.CurrentUIApplication \r\n# app = uiapp.Application\r\n# uidoc = uiapp.ActiveUIDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ndefault_exterior_wall_type = UnwrapElement(IN[0])                   # Default exterior wall type\r\ndefault_floor_type = UnwrapElement(IN[1])                           # Default Floor type\r\ndefault_interior_wall_type = UnwrapElement(IN[2])\t\t\t\t# Default interior wall type\r\n### INPUT PARAMETERS ###\r\nparameter_list = IN[3][1]\r\nsite_x = parameter_list[0]                                # the overall length of the site\r\nsite_y = parameter_list[1]                                # the overall widthness of the site\r\nCORR_WIDTH = parameter_list[2] # convert_meter_to_unit(3)\r\nNUM_ROOMS_PER_SIDE = parameter_list[3]\r\nINCLUDE_BOTTLENECK = parameter_list[4]\r\ncreate_mode = IN[7][1]\r\nDOOR_WIDTH_H = convert_meter_to_unit(float(IN[4])/2.)\r\nOBSTACLE_WIDTH = float(IN[5])\r\n\r\nnumber_story = 1                                          # the total amount of the stories;\r\nstory_z = [0]\r\nsite_z = 4                                              # the overall height of the site\r\nref_level_z = 0                                         # the z-position of the reference level (default level = level 0, created in the prepared .rvt)\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n###############################################################\r\n# Define the output\r\n###############################################################\r\n\r\n# Create room dict\r\nroom_dict = {}\r\n\r\nif create_mode:\r\n    geo_site = []                                                       # archive all the input data\r\n    ref_level = []                                                      # the reference level\r\n    bbox_site = []                                                      # bounding box of the site\r\n\r\n    # sys.path.append('C:\\Users\\ga78jem\\Miniconda3\\envs\\trajectron++\\Lib\\site-packages')\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n\r\n    # print \"site x before conversion:\" + str(site_x)\r\n    # adjust the sizes to account for wall thickness\r\n    site_x -= 0.3\r\n    site_y -= 0.3\r\n    # convert to Revit units\r\n    site_x = convert_meter_to_unit(site_x)\r\n    site_y = convert_meter_to_unit(site_y)\r\n    site_z = convert_meter_to_unit(site_z)\r\n    ref_level_z = convert_meter_to_unit(ref_level_z)\r\n    CORR_WIDTH = convert_meter_to_unit(CORR_WIDTH)\r\n    # print \"site x after conversion:\" + str(site_x)\r\n\r\n    ###############################################################\r\n    # Delete all levels apart from the reference level (when there are multiple levels)\r\n    ###############################################################\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    def clear_model(bool_value):\r\n        if bool_value:\r\n            del_grid = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType().ToElements()\r\n            del_door = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n            del_floor = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n            del_wall = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n            del_roof = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n            del_all = [del_grid, del_door, del_floor, del_wall, del_roof]\r\n            for element_type in del_all:\r\n                for element in element_type:\r\n                    doc.Delete(element.Id)\r\n\r\n    clear_model(True)\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 01_Site\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level_z:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != ref_level_z:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, ref_level_z)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    #--------------------------------------------------------------\r\n    #------------------ OK NOW YOU CAN CODE -----------------------\r\n    #--------------------------------------------------------------\r\n\r\n    # Create Bounding Box\r\n    bb = BoundingBoxXYZ()\r\n    bb.Min = XYZ(0, 0, 0)\r\n    bb.Max = XYZ(0, 0, site_z)\r\n    bbox_site.append(bb.ToProtoType())                  # the bounding box of the entire site\r\n    # Close and save the recording file\r\n    # geo_site.append(site_x)\r\n    # geo_site.append(site_y)\r\n    # geo_site.append(site_z)\r\n\r\n    ###############################################################\r\n    # END OF SCRIPT 1\r\n    # START OF SCRIPT 2\r\n    ###############################################################\r\n\r\n    archive_data = []                                                   # archive all the input data\r\n    bbox_story = []\r\n    exterior_wall_list = []\r\n    floor_list = []\r\n    roof_list = []\r\n    entrance_door_list = []\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n    story_z = convert_meter_to_unit(story_z)\r\n\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 02_Story\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level.Elevation:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != 0:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, 0)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    ###############################################################\r\n    # Check the consistence with the bouning box of the side \r\n    ###############################################################\r\n    # Check the z-position of the highest story against the site box\r\n\r\n    check_site_story = True if max(story_z) < site_z else False\r\n    #print \"The stories are consistent with the overal site:\" + str(check_site_story)\r\n\r\n    # Create new story levels\r\n    for ii in range(number_story):\r\n        if ref_level.Elevation == story_z[ii]:\r\n            continue\r\n        new_level = Autodesk.Revit.DB.Level.Create(doc, story_z[ii])\r\n        new_level.Name = \"Story Level \" + str(ii)\r\n\r\n    # Create the roof level\r\n    roof_level = Autodesk.Revit.DB.Level.Create(doc, site_z)\r\n    roof_level.Name = \"Roof Level\"\r\n\r\n    # all levels\r\n    allLevels = FilteredElementCollector(doc).OfClass(Level).ToElements()\r\n\r\n    # Create Bounding Box for each story level\r\n    for ii in range(number_story):\r\n        level_bbox_end_z = story_z[ii+1] if ii < (number_story-1) else site_z\r\n        #print \"Story\"+str(ii)\r\n        #print str(level_bbox_end_z)\r\n        bb = BoundingBoxXYZ()\r\n        bb.Min = XYZ(0, 0, story_z[ii])\r\n        bb.Max = XYZ(site_x, site_y, level_bbox_end_z)\r\n        bbox_story.append(bb.ToProtoType())\r\n\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n    # Create floorplan complexity\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n\r\n    LENGTH = site_x\r\n    WIDTH = site_y\r\n    print('x_length: ' + str(convert_to_meter(LENGTH)))\r\n    print('y_width: ' + str(convert_to_meter(WIDTH)))\r\n    z_level = ref_level.Elevation\r\n    ceiling = allLevels[0].Elevation\r\n\r\n    obstacle_counter = 0\r\n\r\n    # DOOR_WIDTH_H = convert_meter_to_unit(0.5)\r\n    DOOR_HEIGHT = convert_meter_to_unit(2.2)\r\n    DOOR_THICKNESS_H = convert_meter_to_unit(0.25)\r\n\r\n    # Create the exterior walls\r\n    perimeter_lines = find_perimeter_lines(LENGTH, WIDTH, z_level)\r\n    for ww in range(4):\r\n        wall = Wall.Create(doc, perimeter_lines[ww], default_exterior_wall_type.Id, ref_level.Id, site_z, 0, False, True)\r\n        exterior_wall_list.append(wall)\r\n\r\n    # Create floor for each story level\r\n    for ii in range(number_story):\r\n        ll = allLevels[ii]\r\n        floor_geometry = slab_geometry_by_level(LENGTH, WIDTH, ll, 0.0)\r\n        floor = doc.Create.NewFloor(floor_geometry, default_floor_type, ll, True)\r\n        floor_list.append(floor)\r\n\r\n    # Create corridor lines\r\n\r\n    MIN_ROOM_WIDTH = convert_meter_to_unit(4.)\r\n\r\n    y_main_corridor = 0.5*WIDTH\r\n    x_main_corridor_start = CORR_WIDTH\r\n    x_main_corridor_end = LENGTH-CORR_WIDTH\r\n    \r\n    x_cross_start = x_main_corridor_start + 2*CORR_WIDTH\r\n    x_cross_end = x_main_corridor_end - 2*CORR_WIDTH\r\n\r\n    fractions_partitions = [1./NUM_ROOMS_PER_SIDE*i for i in range(NUM_ROOMS_PER_SIDE+1)] # if NUM_ROOMS_PER_SIDE > 1 else [0.5]\r\n    x_pos_partitions = [x_cross_start + fr * (x_cross_end - x_cross_start) for fr in fractions_partitions]\r\n\r\n    middle_lines_left = []\r\n    middle_lines_right = []\r\n\r\n    p2_l = XYZ(x_main_corridor_start, y_main_corridor+CORR_WIDTH/2., ceiling)\r\n    p3_l = XYZ(x_main_corridor_end, y_main_corridor+CORR_WIDTH/2., ceiling)\r\n    p2_r = XYZ(x_main_corridor_start, y_main_corridor-CORR_WIDTH/2., ceiling)\r\n    p3_r = XYZ(x_main_corridor_end, y_main_corridor-CORR_WIDTH/2., ceiling)\r\n\r\n    corridor_lines_left = [\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(0, y_main_corridor+CORR_WIDTH, ceiling), XYZ(x_main_corridor_start, y_main_corridor+CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_main_corridor_start, y_main_corridor+CORR_WIDTH, ceiling), p2_l),\r\n        Autodesk.Revit.DB.Line.CreateBound(p2_l, p3_l),\r\n        Autodesk.Revit.DB.Line.CreateBound(p3_l, XYZ(x_main_corridor_end, y_main_corridor+CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_main_corridor_end, y_main_corridor+CORR_WIDTH, ceiling), XYZ(LENGTH, y_main_corridor+CORR_WIDTH, ceiling)),\r\n    ]\r\n\r\n    corridor_lines_right = [\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(0, y_main_corridor-CORR_WIDTH, ceiling), XYZ(x_main_corridor_start, y_main_corridor-CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_main_corridor_start, y_main_corridor-CORR_WIDTH, ceiling), p2_r),\r\n        Autodesk.Revit.DB.Line.CreateBound(p2_r, p3_r),\r\n        Autodesk.Revit.DB.Line.CreateBound(p3_r, XYZ(x_main_corridor_end, y_main_corridor-CORR_WIDTH, ceiling)),\r\n        Autodesk.Revit.DB.Line.CreateBound(XYZ(x_main_corridor_end, y_main_corridor-CORR_WIDTH, ceiling), XYZ(LENGTH, y_main_corridor-CORR_WIDTH, ceiling)),\r\n    ]\r\n    \r\n    corridor_walls_left = [Wall.Create(doc, wall_l, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n        for wall_l in corridor_lines_left]\r\n    corridor_walls_right = [Wall.Create(doc, wall_r, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n        for wall_r in corridor_lines_right]\r\n\r\n    if INCLUDE_BOTTLENECK:\r\n        bottleneck_lines = [\r\n            Autodesk.Revit.DB.Line.CreateBound(p2_l, p2_r),\r\n            Autodesk.Revit.DB.Line.CreateBound(p3_l, p3_r)\r\n        ]\r\n        bottleneck_walls = [Wall.Create(doc, b_wall, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n            for b_wall in bottleneck_lines]\r\n\r\n        # some doors\r\n        x_door_1 = x_main_corridor_start\r\n        x_door_2 = x_main_corridor_end\r\n        \r\n        start_point_1 = XYZ(x_door_1-DOOR_THICKNESS_H, y_main_corridor-DOOR_WIDTH_H, z_level)\r\n        end_point_1 = XYZ(x_door_1+DOOR_THICKNESS_H, y_main_corridor+DOOR_WIDTH_H, z_level+DOOR_HEIGHT)\r\n        opening_1 = doc.Create.NewOpening(bottleneck_walls[0], start_point_1, end_point_1)\r\n\r\n        start_point_2 = XYZ(x_door_2-DOOR_THICKNESS_H, y_main_corridor-DOOR_WIDTH_H, z_level)\r\n        end_point_2 = XYZ(x_door_2+DOOR_THICKNESS_H, y_main_corridor+DOOR_WIDTH_H, z_level+DOOR_HEIGHT)\r\n        opening_2 = doc.Create.NewOpening(bottleneck_walls[1], start_point_2, end_point_2)\r\n    \r\n    # destination areas\r\n    room_x_min, room_x_max = 0, x_main_corridor_start\r\n    room_y_min, room_y_max = y_main_corridor-CORR_WIDTH, y_main_corridor+CORR_WIDTH\r\n    room_dict.update({\r\n        'CROWDIT_DESTINATION_0': [\r\n                (convert_to_meter(room_x_min)+0.5, convert_to_meter(room_y_min)+0.5),\r\n                (convert_to_meter(room_x_max)-0.5, convert_to_meter(room_y_max)-0.5)\r\n            ]\r\n        }\r\n    )\r\n\r\n    room_x_min, room_x_max = x_main_corridor_end, LENGTH\r\n    room_y_min, room_y_max = y_main_corridor-CORR_WIDTH, y_main_corridor+CORR_WIDTH\r\n    room_dict.update({\r\n        'CROWDIT_DESTINATION_1': [\r\n                (convert_to_meter(room_x_min)+0.5, convert_to_meter(room_y_min)+0.5),\r\n                (convert_to_meter(room_x_max)-0.5, convert_to_meter(room_y_max)-0.5)\r\n            ]\r\n        }\r\n    )\r\n\r\n    for idx, x_pos_part in enumerate(x_pos_partitions):\r\n\r\n        middle_lines_left.append(\r\n                Autodesk.Revit.DB.Line.CreateBound(XYZ(x_pos_part, y_main_corridor+CORR_WIDTH/2., ceiling), XYZ(x_pos_part, WIDTH, ceiling))\r\n        )\r\n        middle_lines_right.append(\r\n            Autodesk.Revit.DB.Line.CreateBound(XYZ(x_pos_part, y_main_corridor-CORR_WIDTH/2., ceiling), XYZ(x_pos_part, 0, ceiling))\r\n        )\r\n\r\n        # some doors\r\n        if idx < len(x_pos_partitions)-1:\r\n            x_opening = (x_pos_partitions[idx]+x_pos_partitions[idx+1]) / 2.\r\n            y_opening_l = y_main_corridor+CORR_WIDTH/2.\r\n            y_opening_r = y_main_corridor-CORR_WIDTH/2.\r\n            z_opening = z_level\r\n\r\n            # left door\r\n            start_point_l = XYZ(x_opening-DOOR_WIDTH_H, y_opening_l-DOOR_THICKNESS_H, z_opening)\r\n            end_point_l = XYZ(x_opening+DOOR_WIDTH_H, y_opening_l+DOOR_THICKNESS_H, z_opening+DOOR_HEIGHT)\r\n            opening_l = doc.Create.NewOpening(corridor_walls_left[2], start_point_l, end_point_l)\r\n\r\n            # right door\r\n            start_point_r = XYZ(x_opening-DOOR_WIDTH_H, y_opening_r-DOOR_THICKNESS_H, z_opening)\r\n            end_point_r = XYZ(x_opening+DOOR_WIDTH_H, y_opening_r+DOOR_THICKNESS_H, z_opening+DOOR_HEIGHT)\r\n            opening_r = doc.Create.NewOpening(corridor_walls_right[2], start_point_r, end_point_r)\r\n\r\n            # assign areas\r\n            room_x_min, room_x_max = min(x_pos_partitions[idx], x_pos_partitions[idx+1]), max(x_pos_partitions[idx], x_pos_partitions[idx+1])\r\n            room_y_min1, room_y_max1 = 0, y_main_corridor-CORR_WIDTH/2.\r\n            room_y_min2, room_y_max2 = y_main_corridor+CORR_WIDTH/2., WIDTH\r\n\r\n            room_dict.update({\r\n                'CROWDIT_ORIGIN_'+str(2*idx): [\r\n                        (convert_to_meter(room_x_min)+0.5, convert_to_meter(room_y_min1)+0.5),\r\n                        (convert_to_meter(room_x_max)-0.5, convert_to_meter(room_y_max1)-0.5)\r\n                    ]\r\n                }\r\n            )\r\n\r\n            room_dict.update({\r\n                'CROWDIT_ORIGIN_'+str(1+2*idx): [\r\n                        (convert_to_meter(room_x_min)+0.5, convert_to_meter(room_y_min2)+0.5),\r\n                        (convert_to_meter(room_x_max)-0.5, convert_to_meter(room_y_max2)-0.5)\r\n                    ]\r\n                }\r\n            )\r\n        \r\n        # obstacles\r\n        obstacle_length = 2.\r\n\r\n        x_obst_min, x_obst_max = convert_to_meter(x_pos_part)-obstacle_length/2., convert_to_meter(x_pos_part)+obstacle_length/2.\r\n        y_obst_min = convert_to_meter(y_main_corridor+CORR_WIDTH/2.)-0.1-OBSTACLE_WIDTH if idx%2 == 0 else convert_to_meter(y_main_corridor-CORR_WIDTH/2.)+0.1\r\n        y_obst_max = convert_to_meter(y_main_corridor+CORR_WIDTH/2.)-0.1 if idx%2 == 0 else convert_to_meter(y_main_corridor-CORR_WIDTH/2.)+0.1+OBSTACLE_WIDTH\r\n\r\n        room_dict.update({\r\n            'CROWDIT_OBSTACLE_'+str(obstacle_counter)+'_2_1_': [\r\n                    (x_obst_min, y_obst_min),\r\n                    (x_obst_max, y_obst_max)\r\n                ]\r\n            }\r\n        )\r\n        obstacle_counter += 1\r\n\r\n    middle_walls_left = [Wall.Create(doc, wall_l, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n        for wall_l in middle_lines_left\r\n    ]\r\n    middle_walls_right = [Wall.Create(doc, wall_r, default_interior_wall_type.Id, allLevels[0].Id, allLevels[1].Elevation - allLevels[0].Elevation, 0, False, True) \r\n        for wall_r in middle_lines_right\r\n    ]\r\n\r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\n\r\nTransactionManager.Instance.TransactionTaskDone()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\nOUT = room_dict\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "868af39007d7486685c6f3b3027ba7b2",
      "Inputs": [
        {
          "Id": "b4ac7e83fd5046e1b45fd6933bd548e3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "477a96558a7441068f81ed09535feae6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "726490496deb4f7093d911f99eff8d5d",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a19c73e19ac47e688e55ec7a780de98",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "381a9e9a069b4f13ae90e6456fe73b73",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8d868603e0f94ac49e0fead2a916587d",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "429db036e23a4b9281fb9d82b5d53a62",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e86afafcac0b46ec9609c1777fbdae5e",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "018d2ad7790a415cb766a4f4bada274d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "###############################################################\r\n# Load the Libraries\r\n###############################################################\r\nimport os\r\nimport clr\r\nimport sys\r\nimport math\r\nimport System\r\n\r\nfrom System import Array\r\nfrom System.Collections.Generic import *\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\n\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager \r\nfrom RevitServices.Transactions import TransactionManager \r\n\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nclr.AddReference('ProtoGeometry')\r\nimport Autodesk \r\nfrom Autodesk.DesignScript.Geometry import *\r\nfrom Autodesk.Revit.DB import *\r\n#from Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.DB import StairsEditScope\r\nfrom Autodesk.Revit.DB import Parameter\r\nfrom Autodesk.Revit.DB.Architecture import StairsRun\r\nfrom Autodesk.Revit.DB.Architecture import *\r\nfrom Autodesk.Revit.DB import IFailuresPreprocessor\r\n\r\n###############################################################\r\n# Customize functions \r\n###############################################################\r\n\"\"\"\r\nConverts default unit in Dynamo into meter...\r\n\"\"\"\r\ndef convert_meter_to_unit(pre_value):\r\n    tempo_list = []\r\n    tempo_value = 0\r\n    if isinstance(pre_value, list):\r\n        len_list = len(pre_value)\r\n        for ii in range(len_list):\r\n            tempo_list.append (float(UnitUtils.ConvertToInternalUnits(pre_value[ii], UnitTypeId.Meters)))\r\n        pre_value = tempo_list\r\n    else:\r\n        tempo_value = float(UnitUtils.ConvertToInternalUnits(pre_value, UnitTypeId.Meters))\r\n        pre_value = tempo_value\r\n    return pre_value\r\n\r\n\r\ndef convert_to_meter(internal_value):\r\n\tif isinstance(internal_value, list):\r\n\t\treturn [UnitUtils.ConvertFromInternalUnits(value, UnitTypeId.Meters) for value in internal_value]\r\n\treturn float(UnitUtils.ConvertFromInternalUnits(internal_value, UnitTypeId.Meters))\r\n\r\n\"\"\"\r\nProvide perimeter lines from three dimensions...\r\n\"\"\"\r\ndef find_perimeter_lines(x,y,z):\r\n    line_list = []\r\n    xx = x\r\n    yy = y\r\n    zz = z \r\n    # print \"find_perimeter_lines x: \" + str(x)\r\n    # print \"find_perimeter_lines y: \" + str(y)\r\n    # print \"find_perimeter_lines z: \" + str(z)\r\n\t\r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n\r\n    line_list.append(line_1)\r\n    line_list.append(line_2)\r\n    line_list.append(line_3)\r\n    line_list.append(line_4)\r\n    \r\n    return line_list\r\n\r\n\"\"\"\r\nProvide the geometry of slab by level...\r\n\"\"\"\r\ndef slab_geometry_by_level(x,y,level,delta_z):\r\n    zz = level.Elevation + delta_z\r\n    xx = x\r\n    yy = y \r\n    line_1 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,0,zz),    XYZ(xx,0,zz))\r\n    line_2 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,0,zz),   XYZ(xx,yy,zz))\r\n    line_3 = Autodesk.Revit.DB.Line.CreateBound(XYZ(xx,yy,zz),  XYZ(0,yy,zz))\r\n    line_4 = Autodesk.Revit.DB.Line.CreateBound(XYZ(0,yy,zz),   XYZ(0,0,zz))\r\n    \r\n    slab_geometry = CurveArray()\r\n    slab_geometry.Append(line_1)\r\n    slab_geometry.Append(line_2)\r\n    slab_geometry.Append(line_3)\r\n    slab_geometry.Append(line_4)\r\n    return slab_geometry\r\n\r\n###############################################################\r\n# Current doc/app/ui\r\n###############################################################\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# uiapp = DocumentManager.Instance.CurrentUIApplication \r\n# app = uiapp.Application\r\n# uidoc = uiapp.ActiveUIDocument\r\n\r\n###############################################################\r\n# Prepare the input\r\n###############################################################\r\ndefault_exterior_wall_type = UnwrapElement(IN[0])                   # Default exterior wall type\r\ndefault_floor_type = UnwrapElement(IN[1])                           # Default Floor type\r\ndefault_interior_wall_type = UnwrapElement(IN[2])\t\t\t\t# Default interior wall type\r\n### INPUT PARAMETERS ###\r\nparameter_list = IN[3][1]\r\nsite_x = parameter_list[0]                                # the overall length of the site\r\nsite_y = parameter_list[1]                                # the overall widthness of the site\r\nCORR_WIDTH = parameter_list[2]\r\nMIN_ROOM_LENGTH = parameter_list[3]\r\nINCLUDE_BOTTLENECK = parameter_list[4]\r\ncreate_mode = IN[7][0]\r\nDOOR_WIDTH_H = convert_meter_to_unit(float(IN[4])/2.)\r\nOBSTACLE_WIDTH  = float(IN[5])\r\nROOM_WIDTH = convert_meter_to_unit(float(IN[6]))\r\nSTAIR_TYPE = UnwrapElement(IN[8])\r\n\r\nnumber_story = 3                                          # the total amount of the stories;\r\nstory_z = [0 , 2 , 4]\r\nsite_z = 6                                              # the overall height of the site\r\nref_level_z = 0                                         # the z-position of the reference level (default level = level 0, created in the prepared .rvt)\r\n###############################################################\r\n# Transaction in Revit\r\n###############################################################\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\n###############################################################\r\n# Define the output\r\n###############################################################\r\n\r\n# Create room dict\r\nroom_dict = {}\r\n\r\nif create_mode:\r\n    geo_site = []                                                       # archive all the input data\r\n    ref_level = []                                                      # the reference level\r\n    bbox_site = []                                                      # bounding box of the site\r\n\r\n    # sys.path.append('C:\\Users\\ga78jem\\Miniconda3\\envs\\trajectron++\\Lib\\site-packages')\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n\r\n    # print \"site x before conversion:\" + str(site_x)\r\n    # adjust the sizes to account for wall thickness\r\n    site_x -= 0.3\r\n    site_y -= 0.3\r\n    site_x = convert_meter_to_unit(site_x)\r\n    site_y = convert_meter_to_unit(site_y)\r\n    site_z = convert_meter_to_unit(site_z)\r\n    ref_level_z = convert_meter_to_unit(ref_level_z)\r\n    CORR_WIDTH = convert_meter_to_unit(CORR_WIDTH)\r\n    MIN_ROOM_LENGTH = convert_meter_to_unit(MIN_ROOM_LENGTH)\r\n    \r\n    # print \"site x after conversion:\" + str(site_x)\r\n\r\n    ###############################################################\r\n    # Delete all levels apart from the reference level (when there are multiple levels)\r\n    ###############################################################\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    def clear_model(bool_value):\r\n        if bool_value:\r\n            del_grid = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Grids).WhereElementIsNotElementType().ToElements()\r\n            del_door = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Doors).WhereElementIsNotElementType().ToElements()\r\n            del_floor = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Floors).WhereElementIsNotElementType().ToElements()\r\n            del_wall = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Walls).WhereElementIsNotElementType().ToElements()\r\n            del_roof = FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Roofs).WhereElementIsNotElementType().ToElements()\r\n            del_all = [del_grid, del_door, del_floor, del_wall, del_roof]\r\n            for element_type in del_all:\r\n                for element in element_type:\r\n                    doc.Delete(element.Id)\r\n\r\n    clear_model(True)\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 01_Site\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level_z:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != ref_level_z:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, ref_level_z)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    #--------------------------------------------------------------\r\n    #------------------ OK NOW YOU CAN CODE -----------------------\r\n    #--------------------------------------------------------------\r\n\r\n    # Create Bounding Box\r\n    bb = BoundingBoxXYZ()\r\n    bb.Min = XYZ(0, 0, 0)\r\n    bb.Max = XYZ(0, 0, site_z)\r\n    bbox_site.append(bb.ToProtoType())                  # the bounding box of the entire site\r\n    # Close and save the recording file\r\n    # geo_site.append(site_x)\r\n    # geo_site.append(site_y)\r\n    # geo_site.append(site_z)\r\n\r\n    ###############################################################\r\n    # END OF SCRIPT 1\r\n    # START OF SCRIPT 2\r\n    ###############################################################\r\n\r\n    archive_data = []                                                   # archive all the input data\r\n    bbox_story = []\r\n    exterior_wall_list = []\r\n    floor_list = []\r\n    roof_list = []\r\n    entrance_door_list = []\r\n\r\n    ###############################################################\r\n    # Convert the Units | b = UnitUtils.ConvertToInternalUnits(a, UnitTypeId.Meters)  b = a*3 | c = UnitUtils.ConvertFromInternalUnits(a, UnitTypeId.Meters)  c = a*3\r\n    ###############################################################\r\n    story_z = convert_meter_to_unit(story_z)\r\n\r\n    # Collect all levels\r\n    levelArray = (FilteredElementCollector(doc)\r\n        .OfCategory(BuiltInCategory.OST_Levels)\r\n        .WhereElementIsNotElementType()\r\n        .ToElements())\r\n\r\n    # Check the number of the existing levels, if multiple, delete and save only one\r\n    if len(levelArray) > 1:\r\n        #print \"levelArray.Count > 1, from 02_Story\"\r\n        for levelElement in levelArray:\r\n            if levelElement.Elevation != ref_level.Elevation:\r\n                doc.Delete(levelElement.Id)\r\n    ref_level = levelArray[0]\r\n    ref_level.Name = \"Story Level 0\"\r\n\r\n    # Check the if the saved one is the reference level, correct it if not\r\n    if ref_level.Elevation != 0:\r\n        ref_level_new = Autodesk.Revit.DB.Level.Create(doc, 0)\r\n        doc.Delete(ref_level.Id)\r\n        ref_level = ref_level_new\r\n        ref_level.Name = \"Story Level 0\"\r\n\r\n    ###############################################################\r\n    # Check the consistence with the bouning box of the side \r\n    ###############################################################\r\n    # Check the z-position of the highest story against the site box\r\n\r\n    check_site_story = True if max(story_z) < site_z else False\r\n    #print \"The stories are consistent with the overal site:\" + str(check_site_story)\r\n\r\n    # Create new story levels\r\n    for ii in range(number_story):\r\n        if ref_level.Elevation == story_z[ii]:\r\n            continue\r\n        new_level = Autodesk.Revit.DB.Level.Create(doc, story_z[ii])\r\n        new_level.Name = \"Story Level \" + str(ii)\r\n\r\n    # Create the roof level\r\n    roof_level = Autodesk.Revit.DB.Level.Create(doc, site_z)\r\n    roof_level.Name = \"Roof Level\"\r\n\r\n    # all levels\r\n    allLevels = FilteredElementCollector(doc).OfClass(Level).ToElements()\r\n\r\n    # Create Bounding Box for each story level\r\n    for ii in range(number_story):\r\n        level_bbox_end_z = story_z[ii+1] if ii < (number_story-1) else site_z\r\n        #print \"Story\"+str(ii)\r\n        #print str(level_bbox_end_z)\r\n        bb = BoundingBoxXYZ()\r\n        bb.Min = XYZ(0, 0, story_z[ii])\r\n        bb.Max = XYZ(site_x, site_y, level_bbox_end_z)\r\n        bbox_story.append(bb.ToProtoType())\r\n\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n    # Create floorplan complexity\r\n    ##############################################################################################################################\r\n    ##############################################################################################################################\r\n\r\n    LENGTH = site_x\r\n    WIDTH = site_y\r\n    print('x_length: ' + str(convert_to_meter(LENGTH)))\r\n    print('y_width: ' + str(convert_to_meter(WIDTH)))\r\n    z_level = ref_level.Elevation\r\n    ceiling = allLevels[0].Elevation\r\n\r\n    DOOR_HEIGHT = convert_meter_to_unit(2.2)\r\n    DOOR_THICKNESS_H = convert_meter_to_unit(0.25)\r\n\r\n    obstacle_counter = 0\r\n\r\n    # Create the exterior walls\r\n    perimeter_lines = find_perimeter_lines(LENGTH, WIDTH, z_level)\r\n    for ww in range(4):\r\n        wall = Wall.Create(doc, perimeter_lines[ww], default_exterior_wall_type.Id, ref_level.Id, site_z, 0, False, True)\r\n        exterior_wall_list.append(wall)\r\n\r\n    # Create floor for each story level\r\n    for ii in range(number_story):\r\n        ll = allLevels[ii]\r\n        floor_geometry = slab_geometry_by_level(LENGTH, WIDTH, ll, 0.0)\r\n        floor = doc.Create.NewFloor(floor_geometry, default_floor_type, ll, True)\r\n        floor_list.append(floor)\r\n\r\n    floor_plan_family_type = None\r\n    for view_type in FilteredElementCollector(doc).OfClass(ViewFamilyType):\r\n        if view_type.ViewFamily == ViewFamily.FloorPlan:\r\n            floor_plan_family_type = view_type\r\n            break\r\n    \r\n    floor_plan_views = []\r\n    for level in allLevels[1:]:\r\n        floor_plan_view = ViewPlan.Create(doc, floor_plan_family_type.Id, level.Id)\r\n        floor_plan_view.Name = level.Name\r\n        floor_plan_views.append(floor_plan_view)\r\n        \r\n    stairPoint = XYZ(convert_meter_to_unit(site_x / 2.), convert_meter_to_unit(site_y / 2.)  , allLevels[-1].Elevation)\r\n    stairs = doc.Create.NewFamilyInstance(stairPoint, STAIR_TYPE, allLevels[-1], Structure.StructuralType.NonStructural)\r\n    #stairs.GetParameters(\"Top Offset\")[0].Set(convert_meter_to_unit(site_z))\r\n    #stairs.GetParameters(\"Step Width\")[0].Set(convert_meter_to_unit(site_x / 4.))\r\n    #stairs.LookupParameter(\"accu_rate_type\").Set(\"Stair\")\r\n    # ZRotateInstance(math.pi*1.5 + rotationAngle, stairs, stairPoint)   \r\n\r\n#--------------------------------------------------------------\r\n#------------------ OK NOW END THE CODE -----------------------\r\n#--------------------------------------------------------------\r\n\r\n    TransactionManager.Instance.TransactionTaskDone()\r\n\r\n###############################################################\r\n# Prepare the output \r\n###############################################################\r\n    OUT = stairs\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "a1df25350f6a4ad3b24a84ba237b2d2b",
      "Inputs": [
        {
          "Id": "01e7ea5b8e49453eb95e0f05954516aa",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3a56491e7a714a2e8593724adba6562f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b81412d97aed4ccba2647eb76cbf6eee",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6cf75efa2e754f9ab956fc6653abc7ca",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a0426aa4daad444a8246f772f220d2ec",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "016249245e6d4b4bb6ba413bd2132bfb",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "587b8deffaa14ddea1beff2772890b99",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7c6cbbdef2df45c49151a6446d43a929",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8b3f9a5ad7d64593b8d0955a5dddc6b7",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a198ed3a6f04451ba791e92b9114b804",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "DSRevitNodesUI.FamilyTypes, DSRevitNodesUI",
      "SelectedIndex": 114,
      "SelectedString": "M_Stair Landing Tag:M_Stair Landing Tag",
      "NodeType": "ExtensionNode",
      "Id": "ffdfc4e622834197a77dc5340128c617",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bbdb29061458449bbca4f60d59acf263",
          "Name": "Family Type",
          "Description": "The selected Family Type",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "All family types available in the document."
    }
  ],
  "Connectors": [
    {
      "Start": "d2d109a0acb841e2ad567236db560e7c",
      "End": "0f0fa6ebc52949119895ba7dd5a81150",
      "Id": "4e32fc107d7c4f7fb521c2fad2cfaeda"
    },
    {
      "Start": "da786ad9c2324f788dc3112e82b677d7",
      "End": "ce4e283bd5544be2a3e47dffa8a04616",
      "Id": "b511805edeef401ca072dfb875b0bdf3"
    },
    {
      "Start": "da786ad9c2324f788dc3112e82b677d7",
      "End": "ba64f24ac26649919002721973c09e92",
      "Id": "914d25841d6b4149b83b956752f6fc2c"
    },
    {
      "Start": "da786ad9c2324f788dc3112e82b677d7",
      "End": "726490496deb4f7093d911f99eff8d5d",
      "Id": "cf0a85a481304aff8330d947c4cbc258"
    },
    {
      "Start": "da786ad9c2324f788dc3112e82b677d7",
      "End": "b81412d97aed4ccba2647eb76cbf6eee",
      "Id": "e45662b5fc1c4152bd966e8de07c3020"
    },
    {
      "Start": "9c01fa3cad20409dbdcd375612fa4c8e",
      "End": "35c72e7a9b8e4c1c9896dbe0ea97a867",
      "Id": "7e145983e8984c32bf22dff958bd419a"
    },
    {
      "Start": "9c01fa3cad20409dbdcd375612fa4c8e",
      "End": "4b873e29bffa4f1b8aa8863b559b6422",
      "Id": "ed4703c0f1ca43029df464f4688c391f"
    },
    {
      "Start": "9c01fa3cad20409dbdcd375612fa4c8e",
      "End": "b4ac7e83fd5046e1b45fd6933bd548e3",
      "Id": "403de74c8759411c80cc7b7ad589b117"
    },
    {
      "Start": "9c01fa3cad20409dbdcd375612fa4c8e",
      "End": "01e7ea5b8e49453eb95e0f05954516aa",
      "Id": "510110d9a7d8493db2e1cb36972b4b4b"
    },
    {
      "Start": "9bf6ec29a49e4c13b6b0397da06c4f03",
      "End": "df4e28a0157c4957be1d9f39b5f8c7a3",
      "Id": "783778be480f421fb7c996824120d779"
    },
    {
      "Start": "9bf6ec29a49e4c13b6b0397da06c4f03",
      "End": "76a74d5c9bdd494c9459f9edac4081d8",
      "Id": "bff1beeb38d241f5895d4b1560aa20e4"
    },
    {
      "Start": "9bf6ec29a49e4c13b6b0397da06c4f03",
      "End": "477a96558a7441068f81ed09535feae6",
      "Id": "fff891cbc64a4a3b967f9559b5fd17e4"
    },
    {
      "Start": "9bf6ec29a49e4c13b6b0397da06c4f03",
      "End": "3a56491e7a714a2e8593724adba6562f",
      "Id": "97a03b78ff964f1186a6bd1b002e725d"
    },
    {
      "Start": "930889da4d4d423b863c113519287359",
      "End": "4c1765db052946249c7dfe061daf2f0a",
      "Id": "c715b33c653b4e4b88675bb80d7ca9dc"
    },
    {
      "Start": "847871052710423085f7a6128caa335c",
      "End": "34347bf83d5a4d6aa31f30e60c8ea79d",
      "Id": "7e6fe753fb99457fb383987c3a0ca383"
    },
    {
      "Start": "b800d4a6f1c4478887101fb376c5fef6",
      "End": "7b591e97eb804a8c9c92795d1a27d5c2",
      "Id": "4071915818ea402b8f3b693f9897b412"
    },
    {
      "Start": "18f34a600a404da18eb08d07bc812f06",
      "End": "3431a07f7f8f4c9897236498223dba3c",
      "Id": "bc24115cd61b4486b7531bbb15afd66a"
    },
    {
      "Start": "12a26aaf908b4bab95840ba4dc85eaa6",
      "End": "647a974d6a684543a040e83c36da759d",
      "Id": "ddfc882e369040eda5b92fa3c556a02f"
    },
    {
      "Start": "eb90d5b34b1b4d5f82f76b475484ba71",
      "End": "fa75968f4d2345dc9c17d0edb234c7db",
      "Id": "98b70620af694f5daefcc82570c84acb"
    },
    {
      "Start": "eb90d5b34b1b4d5f82f76b475484ba71",
      "End": "4e6d4f62cbcd4195a6f940cec7f92f2c",
      "Id": "a5f276a0474c42f287338e4db9500b7b"
    },
    {
      "Start": "eb90d5b34b1b4d5f82f76b475484ba71",
      "End": "8a19c73e19ac47e688e55ec7a780de98",
      "Id": "c1caa45ecf044cadbcdc69d22ad3e855"
    },
    {
      "Start": "eb90d5b34b1b4d5f82f76b475484ba71",
      "End": "6cf75efa2e754f9ab956fc6653abc7ca",
      "Id": "989199c1192d4c20803e836e963a0df5"
    },
    {
      "Start": "df8d276d2094405fae1bd75149a31f04",
      "End": "6d16b8090d0346c293f5ef6dcf388afb",
      "Id": "7e04d7001d564021b4c539c0c28b7193"
    },
    {
      "Start": "8d3bf1da095642f599a8d81544fe2b93",
      "End": "7a3d46c441f742268f44d1ab34c5cb38",
      "Id": "303efe596c8b42f48f25456955577748"
    },
    {
      "Start": "8d3bf1da095642f599a8d81544fe2b93",
      "End": "4cddcfb59735429d9e5fe5c9f9241289",
      "Id": "8135046e90954367a64d83c2f9016e09"
    },
    {
      "Start": "8d3bf1da095642f599a8d81544fe2b93",
      "End": "381a9e9a069b4f13ae90e6456fe73b73",
      "Id": "d1458274f79d4b3786bb89865d31cb0e"
    },
    {
      "Start": "8d3bf1da095642f599a8d81544fe2b93",
      "End": "a0426aa4daad444a8246f772f220d2ec",
      "Id": "501a839a5b18405baffa9bf64f17c0e2"
    },
    {
      "Start": "a89419cf1b51448eb515ea3a35dce344",
      "End": "793de23a0c2c4f2bae45731ef6ae28e9",
      "Id": "d25ed6a964994d12ababa8184b7587aa"
    },
    {
      "Start": "a89419cf1b51448eb515ea3a35dce344",
      "End": "7f8ed784785d47fb88743525cca4eef6",
      "Id": "49a7eee8f0f4418abc25f246248d016e"
    },
    {
      "Start": "a89419cf1b51448eb515ea3a35dce344",
      "End": "8d868603e0f94ac49e0fead2a916587d",
      "Id": "1b686cbe73184aefaa8ca70089e782a6"
    },
    {
      "Start": "a89419cf1b51448eb515ea3a35dce344",
      "End": "016249245e6d4b4bb6ba413bd2132bfb",
      "Id": "e80d38a397a440c39a24fea18788d80c"
    },
    {
      "Start": "6550584e1d7b49e6800bd273ec1a7e76",
      "End": "f7de0eede8344f88b73eb2add8251f9a",
      "Id": "0c1aa73d72cb47678bda4b36d1797cdc"
    },
    {
      "Start": "6550584e1d7b49e6800bd273ec1a7e76",
      "End": "ae17fb0ac8b443959615d41e1d05fc4c",
      "Id": "6d056cc45c9b4c9880fcf66ecf97ed94"
    },
    {
      "Start": "6550584e1d7b49e6800bd273ec1a7e76",
      "End": "d76fcae3ff5a4095b5933d28d14b924d",
      "Id": "3a213825421b43bfbb9f680d614ac3ee"
    },
    {
      "Start": "6798c119db7c40e7b7ef37d1151cacc3",
      "End": "78e77e68f8514c088e93a90194e4577e",
      "Id": "bbeaf9452ab541398994b3920f6d967d"
    },
    {
      "Start": "69cb8e815f734e1898163a8e2879faab",
      "End": "edfc38076a79441eb201fd4f83041922",
      "Id": "24da7811253b44d68ec92aca291e5865"
    },
    {
      "Start": "64fcd170427f4369ba17b544d0b19a80",
      "End": "42e5f23ca5324b429d30e4ded770669a",
      "Id": "7879d9956a0d43b5a8429baefee436e1"
    },
    {
      "Start": "2abd18bf03094fbc8a22cea686c7cfe9",
      "End": "db261a26c419451ebfe326438fc6c733",
      "Id": "f6f59f020caa41bab62ab41ecdd71163"
    },
    {
      "Start": "416de6a731e2479f952ca375196fb4f1",
      "End": "95775af539bb4fe7894be58765b6ea9d",
      "Id": "db0a6b7d74694b9398c49283ce2b5c86"
    },
    {
      "Start": "416de6a731e2479f952ca375196fb4f1",
      "End": "db03b9ae409345eab215ed70827d8ab6",
      "Id": "7571f2eaa1c04ee1bf084c85b0027925"
    },
    {
      "Start": "416de6a731e2479f952ca375196fb4f1",
      "End": "178c784dab4e4425a83ddc681cdc71cc",
      "Id": "53826470b456476f864c509827936de3"
    },
    {
      "Start": "c80520e02a5243f9925ddb9aeed5ad68",
      "End": "c6a3a74970274941bec7166c8aa5a1d6",
      "Id": "6da8ea5a9b854e9cb3f6814d92375d82"
    },
    {
      "Start": "88b94ac8d9044268b5d2e918a278f7e9",
      "End": "376e458f9414424f9ab71a715bcc02ea",
      "Id": "3986864bca2f472fa0cd866a0d3f5985"
    },
    {
      "Start": "e869cae4f4594e51a8039056990a8811",
      "End": "d7b8da2a76d246deb09224f37bc5dbf5",
      "Id": "86015c898e504592a8dcd21287e4ce47"
    },
    {
      "Start": "60080b7de4334cf380c535ae11014aaa",
      "End": "c644a32e194e4a259337968ba3c43306",
      "Id": "990417938a3e45ef99ac4168f221b491"
    },
    {
      "Start": "db1c9a1dd7a240b99e8b04cc633a7611",
      "End": "885a14315f0940dead09c89188cf8326",
      "Id": "4ea13cfc6d694ea8ac87f0dedbf12603"
    },
    {
      "Start": "bf400ed61b9742d584bfd4cf010ef802",
      "End": "876f159b324c4ccab952897115883839",
      "Id": "029323ce98b94d36ac0d50dca94411a0"
    },
    {
      "Start": "b8f5cd8986714c41afed88f4e87d4e09",
      "End": "8d015dc0f5224b04b0ac58a185ae5bac",
      "Id": "4d2136a670774e0ab140d556f1748e09"
    },
    {
      "Start": "b8f5cd8986714c41afed88f4e87d4e09",
      "End": "901128fb59ea4db998c544516c3b4a8d",
      "Id": "40377c187b8d46aab239137d9631cf76"
    },
    {
      "Start": "5349b6b40d504375afc9a0c833d17dab",
      "End": "54b6225dd99c477f9947071d319c648f",
      "Id": "819a4119abb04ebc9ffec76bde7ed56c"
    },
    {
      "Start": "2e1c74af0f224c04b84ab0f0b6dfdf62",
      "End": "41ba99cba4e64f519e08c9c1e860ea69",
      "Id": "3a8bd7f0fdf5488d904327beffaf1e57"
    },
    {
      "Start": "2e1c74af0f224c04b84ab0f0b6dfdf62",
      "End": "1b3e6de00acf4699a43fefa197101759",
      "Id": "8c67022efc4e4e929d9202a9b673317b"
    },
    {
      "Start": "ad00d2e87abe43e0aa26b638d356cc87",
      "End": "502835758b364069ad45466f2cbc890a",
      "Id": "a5018022418e446c9003b01c127bcf47"
    },
    {
      "Start": "ad00d2e87abe43e0aa26b638d356cc87",
      "End": "501d7b29d17845baa1b8764d5eda9efc",
      "Id": "37dad017bc034dadaba4cb1dd796df4e"
    },
    {
      "Start": "564d7612b1ed4c90ba99f49243b272f5",
      "End": "e2d87c0b05a041bf9bf07403fc7aed14",
      "Id": "83d2ac43283b44d9a64262083c5b674e"
    },
    {
      "Start": "87e6ad3927b24a17b0cd7df7c50ecb56",
      "End": "45fa907b28f946ae85ae6a6d9f156f16",
      "Id": "e64ef7377e8643368499b418f2a6c802"
    },
    {
      "Start": "41486586813d46989a9303484f1828db",
      "End": "b717d725fd174d5285bf360cd3af90da",
      "Id": "5720f12ac5894638b29d477e1972adbd"
    },
    {
      "Start": "5e9c833514ac40b4b8701ff61b6bf2a4",
      "End": "8b6d42444a5845c5802641540cf4f96f",
      "Id": "98225b1b01f24513bf787067b227ff5a"
    },
    {
      "Start": "5e9c833514ac40b4b8701ff61b6bf2a4",
      "End": "b503e4d4fc0a4383bf8453c8b7e5eef4",
      "Id": "fecf3f3fccd442b99184d68daaff5b56"
    },
    {
      "Start": "5e9c833514ac40b4b8701ff61b6bf2a4",
      "End": "d484e6a1fa164544a54da47873d19694",
      "Id": "e7c80989bed946c9896bf58ade8109b2"
    },
    {
      "Start": "5e9c833514ac40b4b8701ff61b6bf2a4",
      "End": "1bb32dbd1bae4c55917622bced4e8e34",
      "Id": "e12cde3e85aa4e9bacab1e95d096348b"
    },
    {
      "Start": "5e9c833514ac40b4b8701ff61b6bf2a4",
      "End": "8bccc8c595f14beeab1c6fcb9b2cc0df",
      "Id": "6b6c55b10ea14fbea051beadb7be6575"
    },
    {
      "Start": "46145a704d184e48ae7f13d166bfbc4d",
      "End": "e785c04dc86a4eafa6c6fc278d4fe1bc",
      "Id": "35d7b54500f4460eb0bb964d3979af5c"
    },
    {
      "Start": "46145a704d184e48ae7f13d166bfbc4d",
      "End": "fbacd9ecc2334498922627d809c339fd",
      "Id": "b771f96dd6144ca6bcaefa2f2ebfd718"
    },
    {
      "Start": "46145a704d184e48ae7f13d166bfbc4d",
      "End": "429db036e23a4b9281fb9d82b5d53a62",
      "Id": "b9e8824a7d43451e8935923f3b8137b5"
    },
    {
      "Start": "46145a704d184e48ae7f13d166bfbc4d",
      "End": "587b8deffaa14ddea1beff2772890b99",
      "Id": "91f2c7e610bf46229dbcd5d3712be7f1"
    },
    {
      "Start": "953e2fa38e81426b9b4cfa25bd9720e5",
      "End": "32b4fbba0e5a46e38ed494c056314cda",
      "Id": "95f1d74eb6f14d8eb9ca15e591dd6504"
    },
    {
      "Start": "527add7e5a884f759a7a06f645ccc0cb",
      "End": "931d6c0ab3e3404395c44e13d048e644",
      "Id": "551ce09b59c74f8f9e310bd07a03f522"
    },
    {
      "Start": "527add7e5a884f759a7a06f645ccc0cb",
      "End": "1af87cd028154478949e50c34951429b",
      "Id": "12e6d93d949848acb16f48f5529dd937"
    },
    {
      "Start": "527add7e5a884f759a7a06f645ccc0cb",
      "End": "e86afafcac0b46ec9609c1777fbdae5e",
      "Id": "c9e07dcb8a304543892716f22243ca11"
    },
    {
      "Start": "527add7e5a884f759a7a06f645ccc0cb",
      "End": "7c6cbbdef2df45c49151a6446d43a929",
      "Id": "d1cdfd217ab94431886195e3998de836"
    },
    {
      "Start": "527add7e5a884f759a7a06f645ccc0cb",
      "End": "577dd3a7b7ee4a158562988ab1820fd1",
      "Id": "19433e8886ad49758b45313604392c46"
    },
    {
      "Start": "0162b24614ee49fe9a23a04ae7f3f2ae",
      "End": "a2cce34ef3104ac1b25c06a447470323",
      "Id": "32f328a6225744128839a1846e1569c3"
    },
    {
      "Start": "6fec0bed45ba48d0b089a4b31ff034c4",
      "End": "9f36dd8fe2714c6aa6567bc6d84de739",
      "Id": "6e572e4b492043a1a7c2021615e425fa"
    },
    {
      "Start": "018d2ad7790a415cb766a4f4bada274d",
      "End": "4a57837ccc2442099e6f52922051b995",
      "Id": "aca40fd03ae64d6b9aa6f734ea715dee"
    },
    {
      "Start": "a198ed3a6f04451ba791e92b9114b804",
      "End": "eb6d000b1f00435e874b4170fab9a45f",
      "Id": "cd28fcc06e3c45b38814b0576507f8e1"
    },
    {
      "Start": "bbdb29061458449bbca4f60d59acf263",
      "End": "8b3f9a5ad7d64593b8d0955a5dddc6b7",
      "Id": "be279516a8f949b2a2f400f8f34e5ed0"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.1.3976",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -84.242538452148438,
      "EyeY": 205.51405334472656,
      "EyeZ": 30.885639190673828,
      "LookX": 97.796066284179688,
      "LookY": -201.87266540527344,
      "LookZ": -33.968097686767578,
      "UpX": 0.72859406471252441,
      "UpY": 0.63648122549057007,
      "UpZ": -0.25306591391563416
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "E2EGeometryCreator",
        "Id": "ec5e304ac4a245be9aa9421d0e99101c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2175.6361136256883,
        "Y": 114.22186653665744
      },
      {
        "ShowGeometry": true,
        "Name": "Default Interior Wall Types",
        "Id": "f30b125359f14000a76fa5c133fb3543",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3095.1561894855586,
        "Y": -196.22541060715437
      },
      {
        "ShowGeometry": true,
        "Name": "Default Exterior Wall Types",
        "Id": "9abbe9e09e324c899a59bdff2eca4aa8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3097.0191592141196,
        "Y": -371.04955645339248
      },
      {
        "ShowGeometry": true,
        "Name": "Default Floor Types",
        "Id": "40bb13f55e2f49fa852ce792d05d6883",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3062.8760258214134,
        "Y": -284.11573021339024
      },
      {
        "ShowGeometry": true,
        "Name": "CORRIDOR WIDTH",
        "Id": "ac1bad5b4a9e4b1cabcdfd715b9e5da5",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3158.8824815619669,
        "Y": 61.183376185554437
      },
      {
        "ShowGeometry": true,
        "Name": "NUM_ROOMS_SHORT_SIDE",
        "Id": "6eda79a2c2e040078d1fd66754c14bd9",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3160.017393535667,
        "Y": 127.75385133767321
      },
      {
        "ShowGeometry": true,
        "Name": "NUM_ROOMS_LONG_SIDE",
        "Id": "d441a2d6f0c14ff48dd4597348011063",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3160.7467156567845,
        "Y": 190.34400531203522
      },
      {
        "ShowGeometry": true,
        "Name": "SITE_X",
        "Id": "7e346971f5c24f37a17e4b6625f1dfd8",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3169.388656918949,
        "Y": -106.48263490470117
      },
      {
        "ShowGeometry": true,
        "Name": "SITE_Y",
        "Id": "584bef6044484045b318ed18b4ef189a",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3162.33590001249,
        "Y": -30.318677188717288
      },
      {
        "ShowGeometry": true,
        "Name": "ParameterPreprocessor",
        "Id": "a296cde849384991a7ca241cbc98f5fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2703.0728851705403,
        "Y": -26.220758980760479
      },
      {
        "ShowGeometry": true,
        "Name": "INCLUDE_BOTTLENECK",
        "Id": "a4e31f61d6e142a69577153b5065a6bf",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3061.6603156360816,
        "Y": 254.60164659578521
      },
      {
        "ShowGeometry": true,
        "Name": "Door width",
        "Id": "70fcc779d10b4e938be946e767918ee3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2991.9026138013483,
        "Y": 321.69059081636732
      },
      {
        "ShowGeometry": true,
        "Name": "Obstacle width",
        "Id": "6f1a4e47855a4b5585aab50009ce3e5c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3016.4389787916916,
        "Y": 381.76734751963107
      },
      {
        "ShowGeometry": true,
        "Name": "CreateFloorPlanWithOverlaidZones",
        "Id": "642c0dc4c5f945a291c5b48263a7912e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3115.0823550146761,
        "Y": 813.8611587471139
      },
      {
        "ShowGeometry": true,
        "Name": "PaddedImageWidth(INT)",
        "Id": "69961faf99e747c196644069ed5d4ea7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3045.608924679676,
        "Y": 877.537375671508
      },
      {
        "ShowGeometry": true,
        "Name": "PaddedImageHeight(INT)",
        "Id": "aab17e32e15a4b76b21eb0e8944b4307",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3046.4858823023928,
        "Y": 940.70300605089824
      },
      {
        "ShowGeometry": true,
        "Name": "Hide Elevation Arrows",
        "Id": "f35e214806394a3a9dc0d4619796ee1b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2780.9318775002648,
        "Y": 819.74708791738772
      },
      {
        "ShowGeometry": true,
        "Name": "Color Walls Black",
        "Id": "3106a787001843e7ae1586390c237861",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2509.734888966505,
        "Y": 815.87854721486769
      },
      {
        "ShowGeometry": true,
        "Name": "Virtual Environment Path",
        "Id": "9a614a417e0c42f8921b57863f782f06",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3202.1855633094574,
        "Y": 1007.4000006305582
      },
      {
        "ShowGeometry": true,
        "Name": "Get rid of cropbox",
        "Id": "9ec485d6907a401aa15548f440cdd5e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2281.32027967644,
        "Y": 814.00054552275765
      },
      {
        "ShowGeometry": true,
        "Name": "Show Floors in Plan",
        "Id": "571a00e1551644fa8f42a276b217a31e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2068.4001866804761,
        "Y": 816.009911106248
      },
      {
        "ShowGeometry": true,
        "Name": "GetScaledOriginsAndDestinations",
        "Id": "3f38ec1bd27245e4b91b612f2938f245",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1849.3463137443007,
        "Y": 823.10159249404614
      },
      {
        "ShowGeometry": true,
        "Name": "OverlayPlanWithColors",
        "Id": "4eb3e210df8c436c8fe01423c9f8db75",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1563.1645430105743,
        "Y": 820.90947084759182
      },
      {
        "ShowGeometry": true,
        "Name": "ExportFloorPlanImage",
        "Id": "443e7cb5b46144bca29d334d28a2fe57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1336.2665006317052,
        "Y": 819.36163848740648
      },
      {
        "ShowGeometry": true,
        "Name": "GetImageAsBitmap",
        "Id": "1d68dd79e8f54706a8b4ba34bbdaf906",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -906.3497214716898,
        "Y": 815.23730412894884
      },
      {
        "ShowGeometry": true,
        "Name": "Watch Image",
        "Id": "637092e3c50f402983872170eb45d477",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -694.08152535136207,
        "Y": 815.66077181693117
      },
      {
        "ShowGeometry": true,
        "Name": "PathChecker",
        "Id": "8bfa90b9112e4e23a68fc39756efa4e1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2661.0119379973521,
        "Y": 1102.7437226197326
      },
      {
        "ShowGeometry": true,
        "Name": "GetPaddedImage",
        "Id": "24b0032991f94b51aebdd285c0820000",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1113.5313399776194,
        "Y": 817.697469183802
      },
      {
        "ShowGeometry": true,
        "Name": "NN + ForwardPass",
        "Id": "e01c08f46121474586ad26a1c358cb43",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -937.04786481154622,
        "Y": 592.05878259033034
      },
      {
        "ShowGeometry": true,
        "Name": "NN Checkpoint Path",
        "Id": "721ea26c9fba420f8c990a8c967292cc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3192.5575061215777,
        "Y": 1095.4955503872566
      },
      {
        "ShowGeometry": true,
        "Name": "GIF Export Path",
        "Id": "5c93081669324210be810a4e4a7ec04e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3194.0234637320141,
        "Y": 1182.8267206617518
      },
      {
        "ShowGeometry": true,
        "Name": "ExportResultAsGif",
        "Id": "c3d50dcd6f8e4499944ec38f97e14415",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -734.47665449253577,
        "Y": 590.71253768193333
      },
      {
        "ShowGeometry": true,
        "Name": "Element Types",
        "Id": "5cf7b4a5da5a4f08be1428ffddc92ea7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3204.1686033011288,
        "Y": 650.08714102892748
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Type",
        "Id": "5c1fb66a83cb4d55a51126b23a19e6e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3038.1025377539981,
        "Y": 649.64609718839063
      },
      {
        "ShowGeometry": true,
        "Name": "ViewPlan Selector",
        "Id": "958fc39c09054177afcc4d52bea0d278",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2818.5931093128688,
        "Y": 652.30063901812252
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Id",
        "Id": "7220f621ce7e434793244ca8152628d2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2628.72440991282,
        "Y": 647.62637007885075
      },
      {
        "ShowGeometry": true,
        "Name": "Room width",
        "Id": "cd2e5fcb5de24038afc425a3cfefc453",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2998.5731528081615,
        "Y": 444.23312686873595
      },
      {
        "ShowGeometry": true,
        "Name": "Geometry Shape: 1 = MultiLevel; 2 = Cross; 3 = E2E; 4 = Edge",
        "Id": "5b350cebac314cb9a325306ec845d417",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3201.2156726591616,
        "Y": 506.80714922186445
      },
      {
        "ShowGeometry": true,
        "Name": "ModelSelector",
        "Id": "07c3d956cc9249a49cb3b8fc87db942b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2655.6766832362287,
        "Y": 281.46857332479431
      },
      {
        "ShowGeometry": true,
        "Name": "DictExporter",
        "Id": "71d3b8b1743b4defaedca996335ca3d8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1818.3086235054784,
        "Y": 16.613980221307543
      },
      {
        "ShowGeometry": true,
        "Name": "EdgeGeometryCreator",
        "Id": "c83d525564ba435b9ebed82975613598",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2174.4789584512232,
        "Y": 402.05469275526309
      },
      {
        "ShowGeometry": true,
        "Name": "CrossGeometryCreator",
        "Id": "868af39007d7486685c6f3b3027ba7b2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2176.5006070307345,
        "Y": -171.21143274138529
      },
      {
        "ShowGeometry": true,
        "Name": "MultiLevelGeometryCreator",
        "Id": "a1df25350f6a4ad3b24a84ba237b2d2b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2175.2758127695743,
        "Y": -459.49984546872952
      },
      {
        "ShowGeometry": true,
        "Name": "Family Types",
        "Id": "ffdfc4e622834197a77dc5340128c617",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2733.3389385647224,
        "Y": -525.00210681528324
      }
    ],
    "Annotations": [
      {
        "Id": "b9df4177ffdb46eeaa5d58600a52bb86",
        "Title": "GetFloorPlanElementID",
        "Nodes": [
          "7220f621ce7e434793244ca8152628d2",
          "958fc39c09054177afcc4d52bea0d278",
          "5c1fb66a83cb4d55a51126b23a19e6e3",
          "5cf7b4a5da5a4f08be1428ffddc92ea7"
        ],
        "Left": -3214.1686033011288,
        "Top": 594.62637007885075,
        "Width": 780.44419338830858,
        "Height": 150.67426893927177,
        "FontSize": 36.0,
        "InitialTop": 647.62637007885075,
        "InitialHeight": 149.67426893927177,
        "TextblockHeight": 43.0,
        "Background": "#FFFFC999"
      },
      {
        "Id": "530222a91ee7492e92f3ace781455315",
        "Title": "Settings: Geometry",
        "Nodes": [
          "f30b125359f14000a76fa5c133fb3543",
          "9abbe9e09e324c899a59bdff2eca4aa8",
          "40bb13f55e2f49fa852ce792d05d6883",
          "ac1bad5b4a9e4b1cabcdfd715b9e5da5",
          "6eda79a2c2e040078d1fd66754c14bd9",
          "d441a2d6f0c14ff48dd4597348011063",
          "7e346971f5c24f37a17e4b6625f1dfd8",
          "584bef6044484045b318ed18b4ef189a",
          "a4e31f61d6e142a69577153b5065a6bf",
          "70fcc779d10b4e938be946e767918ee3",
          "6f1a4e47855a4b5585aab50009ce3e5c",
          "cd2e5fcb5de24038afc425a3cfefc453",
          "5b350cebac314cb9a325306ec845d417"
        ],
        "Left": -3211.2156726591616,
        "Top": -424.04955645339248,
        "Width": 447.0,
        "Height": 998.85670567525688,
        "FontSize": 36.0,
        "InitialTop": -371.04955645339248,
        "InitialHeight": 1022.8567056752569,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "c6ed7b514b084161ab568646da65a9d5",
        "Title": "Preprocessor Scripts",
        "Nodes": [
          "a296cde849384991a7ca241cbc98f5fb",
          "07c3d956cc9249a49cb3b8fc87db942b"
        ],
        "Left": -2713.0728851705403,
        "Top": -122.22075898076048,
        "Width": 227.0,
        "Height": 533.68933230555479,
        "FontSize": 36.0,
        "InitialTop": -26.220758980760479,
        "InitialHeight": 452.68933230555479,
        "TextblockHeight": 86.0,
        "Background": "#FFD4B6DB"
      },
      {
        "Id": "b3228b81a5f24d368c985f2cb5a86ede",
        "Title": "Settings: Forward Pass",
        "Nodes": [
          "642c0dc4c5f945a291c5b48263a7912e",
          "69961faf99e747c196644069ed5d4ea7",
          "aab17e32e15a4b76b21eb0e8944b4307",
          "9a614a417e0c42f8921b57863f782f06",
          "721ea26c9fba420f8c990a8c967292cc",
          "5c93081669324210be810a4e4a7ec04e"
        ],
        "Left": -3212.1855633094574,
        "Top": 760.8611587471139,
        "Width": 392.0,
        "Height": 515.96556191463787,
        "FontSize": 36.0,
        "InitialTop": 813.8611587471139,
        "InitialHeight": 513.96556191463787,
        "TextblockHeight": 43.0,
        "Background": "#FF48B9FF"
      },
      {
        "Id": "84718a19f6514d5790a53bbe56b5ec2b",
        "Title": "View Settings In Revit",
        "Nodes": [
          "f35e214806394a3a9dc0d4619796ee1b",
          "3106a787001843e7ae1586390c237861",
          "9ec485d6907a401aa15548f440cdd5e8",
          "571a00e1551644fa8f42a276b217a31e"
        ],
        "Left": -2790.9318775002648,
        "Top": 761.00054552275765,
        "Width": 911.53169081978876,
        "Height": 188.74654239463007,
        "FontSize": 36.0,
        "InitialTop": 814.00054552275765,
        "InitialHeight": 150.74654239463007,
        "TextblockHeight": 43.0,
        "Background": "#FFA4E1FF"
      },
      {
        "Id": "491af4e419204e0a8227e5d6e9e4cea8",
        "Title": "Create Floor Plan From Geometry",
        "Nodes": [
          "3f38ec1bd27245e4b91b612f2938f245",
          "4eb3e210df8c436c8fe01423c9f8db75",
          "443e7cb5b46144bca29d334d28a2fe57",
          "1d68dd79e8f54706a8b4ba34bbdaf906",
          "637092e3c50f402983872170eb45d477",
          "24b0032991f94b51aebdd285c0820000"
        ],
        "Left": -1859.3463137443007,
        "Top": 762.23730412894884,
        "Width": 1313.2647883929385,
        "Height": 237.46016505485318,
        "FontSize": 36.0,
        "InitialTop": 815.23730412894884,
        "InitialHeight": 152.86428836509731,
        "TextblockHeight": 43.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "50fc10b310a94fe89b1e7614a8c7abb1",
        "Title": "Inference",
        "Nodes": [
          "e01c08f46121474586ad26a1c358cb43",
          "c3d50dcd6f8e4499944ec38f97e14415"
        ],
        "Left": -947.04786481154622,
        "Top": 537.71253768193333,
        "Width": 392.57121031901045,
        "Height": 210.346244908397,
        "FontSize": 36.0,
        "InitialTop": 590.71253768193333,
        "InitialHeight": 146.346244908397,
        "TextblockHeight": 43.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "59aa74fa23f54eb3959e75d879beb0ae",
        "Title": "PathChecker",
        "Nodes": [
          "8bfa90b9112e4e23a68fc39756efa4e1"
        ],
        "Left": -2671.0119379973521,
        "Top": 1049.7437226197326,
        "Width": 207.17666666666668,
        "Height": 235.0,
        "FontSize": 36.0,
        "InitialTop": 1102.7437226197326,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFFF7BAC"
      },
      {
        "Id": "15961223d2ce42fda6af60b36d35444c",
        "Title": "Geometry Creators\r\n",
        "Nodes": [
          "ec5e304ac4a245be9aa9421d0e99101c",
          "71d3b8b1743b4defaedca996335ca3d8",
          "c83d525564ba435b9ebed82975613598",
          "868af39007d7486685c6f3b3027ba7b2",
          "a1df25350f6a4ad3b24a84ba237b2d2b"
        ],
        "Left": -2186.5006070307345,
        "Top": -555.49984546872952,
        "Width": 514.19198352525609,
        "Height": 1243.5545382239925,
        "FontSize": 36.0,
        "InitialTop": -459.49984546872952,
        "InitialHeight": 1006.5545382239926,
        "TextblockHeight": 86.0,
        "Background": "#FFFF7BAC"
      }
    ],
    "X": 2825.3929890578738,
    "Y": 563.20313141846816,
    "Zoom": 0.89464502465287521
  }
}